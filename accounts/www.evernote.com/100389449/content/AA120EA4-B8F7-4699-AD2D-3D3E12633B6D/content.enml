<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div><br /></div><div><b>Step 1 : Create a new repository in the GitHub:</b></div><div><span>    <span>    <span>    User: hasanovk</span></span></span><br /></div><div><span><span><span><span>    <span>    <span>    Password: The old H***3</span></span></span><br /></span></span></span></div><div><span><span><span><span><span><span>            Repository: <a href="https://github.com/hasanovk/KFH-Log.git">https://github.com/hasanovk/KFH-Log.git</a></span></span></span></span></span></span></div><div><br /></div><div><b>Step 2: Make the Project as a Git Project</b></div><div>Highlight the project and go to “Team” -&gt; “Share” -&gt; “Git”</div><div><en-media hash="a3bd86980f652ebad9f07897aa693697" type="image/png" /></div><div><br /></div><div><b>Step 3: Committing the Project </b></div><div><span>    </span>Highlight the project -&gt; “Team” -&gt;”Commit”</div><div><span>    </span>Move files from the “Unstaged Changes” to “Stages Changes”. You don’t need</div><div><span>    </span>the Eclipse specific and  “.gitignore” files. Click “Commit”.</div><div><span>    </span>Note: This applies to the Local Repository Only. We did not pushed yet! </div><div><en-media hash="50a0e2ad7ed2ee5962337213b99648a3" type="image/png" /></div><div><br /></div><div><b>Step 4: Setting Up the Remote Repositroy and Push files</b></div><div>            First we want to see our Local Repository in the “Repository View”</div><div>            “Team” -&gt; “Show in the Repositroy View”</div><div> <en-media hash="29b0647d9551cc08e806a06569eb5e65" type="image/png" /></div><div><br /></div><div>Now highlight the “Remotes” and “Create Remote…” and click “Add”</div><div><br /></div><div><en-media hash="1d62ed8e7b47ee007395ccfacab89f5b" type="image/png" /></div><div>   </div><div>After the commit , you should be able to see the Remote Repository in the “Repository View”:</div><div><en-media hash="6a8645ee80a21a3c15a325ef13635230" type="image/png" /></div><div><b>Step 5: Configuring the Fetch ( or Pull ) part of the Remote Repository.</b><br /></div><div>           In the last step we set up the Push part of the Repository and now we want</div><div>           to configure the Fetch ( which will keep synchronize with the Remote Server)</div><div>           <en-media hash="fec14cd6305c228e9729de423ef5adbf" type="image/png" /></div><div><br /></div><div> Click on the “Configure Fetch” and setup as below:</div><div><en-media hash="9a703677b9c822355c9e7f8fc301eb77" type="image/png" /></div><div><br /></div><div><b>Step 6: Configuring the Local Master Branch</b></div><div>             So far we setup the Local copy of the Remote Master and the Remote Master.</div><div>             These two always stay synchronize when do “Fetch”, but the Local master needs</div><div>              merge any changes made locally to the “Local Copy of the Remote Repository” first.</div><div><br /></div><div>              Idea here is this: We keep working on our project and the files constantly keep changing.</div><div>              The Local Copy of the Remote Branch Master has no knowledge of the changes utill we</div><div>              “merge”. Before we “merge” we must “fetch” out Local Copy of the Remote Branch with </div><div>              the Remote Master. Why? Because someone might made some commits while we were</div><div>              working in our local branch. </div><div>               <en-media hash="9b3dd4f99cf5277576719b5f2b22e8f2" type="image/png" /></div><div><br /></div><div><br /></div><div>   <b>Step 7: Testing</b></div><div>               We do some change in our project and then “Team” -&gt; “Commit”</div><div>               and write your message and click on “Commit and Push...”</div><div>               <en-media hash="ba379262a1166cc2b6b53b1d91c47f44" type="image/png" /></div><div><br /></div></en-note>