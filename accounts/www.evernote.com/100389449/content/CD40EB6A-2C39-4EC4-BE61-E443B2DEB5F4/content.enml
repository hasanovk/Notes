<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note><div><span style="font-weight: bold; font-size: 36px;">Compound Data Types</span></div><div><br/></div><div><span style="font-weight: bold; font-size: 24px;">Arrays</span></div><ul><li>You can initialize an array without giving a size ( the compile will figure out the size)</li></ul><div>        <span style="color: rgb(0, 143, 0);"> int</span><span style="font-weight: bold;"> a[]</span> = { <span style="color: rgb(148, 17, 0);">0, 1, 1, 2, 3, 5</span> };</div><ul><li>The dimension is optional, but once you set you can not change it.</li><li>if you set an array size and intialize the same time, the size must be equal or  bigger than</li></ul><div>        the number of the elements. If the dimension is bigger than the number of the elements,</div><div>        the remaining part will be filled by <span style="color: rgb(255, 38, 0);">zeros</span>.</div><div>       <span style="color: rgb(79, 143, 0);"> int</span> <span style="font-weight: bold;">a[5] </span>= { <span style="color: rgb(148, 17, 0);">10, 20, 30</span> };</div><div>        <span style="color: rgb(146, 146, 146);">// a[0] = 10, a[1] = 20, a[2] = 30, a[3] = </span><span style="color: rgb(255, 38, 0);">0,</span><span style="color: rgb(146, 146, 146);"> a[4] = </span><span style="color: rgb(255, 38, 0);">0</span><span style="color: rgb(146, 146, 146);">;</span></div><div> </div><ul><li>Multi-demensional arrays are the arrays of the arrays: </li></ul><div>       <span style="color: rgb(0, 143, 0);"> int </span><span style="font-weight: bold;">Array</span>[<span style="color: rgb(4, 51, 255);">Nx</span>][<span style="color: rgb(0, 145, 147);">Ny</span>] ;</div><div>        { { a11, a12, a13},   —&gt; Array [0][0:3] —&gt; Nx  </div><div>           {a21, a22, a23},   —&gt; Array [1][0:3]  —&gt; Nx </div><div>           {a31, a32, a33} }  —&gt; Array[2][0:3]  —&gt; Nx </div><ul><li> When you do for loop , the first size will be the most outer one.</li></ul><div>        Example: Array[Nx] [Ny] [Nz] will start from </div><div>        nx = 0 , ny = 0 do loop for each nz = 0,1,2,…., Nz-1</div><div>        nx = 0,  ny = 1 do loop for each nz = 0,1,2,…., Nz-1</div><div>        …. </div><div>        (so on till we reach ny = Ny-1 )</div><div>        Then,</div><div>         nx =1  and repeat the same thing</div><div>         nx = 2 ….</div><div>         …</div><div>         nx = Nx -1  ( this is last chance to complete ny and nz llops)</div><div><br/></div><div>         The total spin ( or cycle ) of the Nz = Nx x Ny</div><div>          The total spin of the Ny is Ny = Nx</div><div>          The total sping of the Nz is 1 : It goes from 0 to Nz-1 which</div><div>           is one cycle.</div><div><br/></div><div><span style="font-weight: bold; font-size: 24px;">Strings</span></div><div><br/></div><div><span style="color: rgb(145, 145, 145);"># The strings in C is the array of characters terminated by ‘\0’ or 0x00</span></div><div><span style="color: rgb(0, 143, 0);">char</span> <span style="color: rgb(148, 55, 255);">a[ ] </span>= “<span style="color: rgb(4, 51, 255);">University</span>”;</div><div><span style="color: rgb(121, 121, 121);">/* char a[ ] = {‘U’,’n’,’i’,’v’,’e’,’r’,’s’,’i’,’t’,’y’,’\0’};  or {‘U’,’n’,’i’,’v’,’e’,’r’,’s’,’i’,’t’,’y’,0x00}; */</span></div><div><span style="color: rgb(121, 121, 121);">/* Important: If you don’t terminate the char array by ‘\0’ , C will not treat is as a string ! */</span></div><div><span style="color: rgb(121, 121, 121);">/* Note: The number of the characters in a[] is 10, but the array size is 11 */</span></div><div><span style="color: rgb(121, 121, 121);">/* If you set  a[10]=“University”;  C will not complain, but you will get a garbage due to missing ‘\0’ */ </span></div><div><span style="color: rgb(121, 121, 121);"><br/></span></div><div><font color="#797979">// So what will happen when you don’t include the “\0” ? //</font></div><div><font color="#797979">// To see that, lets try this:</font></div><div><font color="#4f8f00">char </font><font color="#d783ff">a[6]</font> = “First”;  <font color="#919191">/* 5 chars + 0x00 , total of 6 elements */</font></div><div><font color="#4f8f00">char</font> <font color="#d783ff">b[6] </font>= “Second”; <font color="#919191">/* we did not include \0 termination */</font></div><div><br/></div><div><b>puts</b>(a);</div><div><b>puts</b>(b);</div><div><font color="#919191"><i>Output : </i></font></div><div><font color="#919191"><i>————&gt;  First                       /* First has 0x00, so no problem */</i></font></div><div><font color="#919191"><i>————&gt;  SecondFirst          /* keep printing till reach 0x00 */</i></font></div><div><br/></div><div><font color="#919191"># As we know that the stack memory fills from top to bottom. The print statement looks for</font></div><div><font color="#919191"># ‘\0’ termination in a staring, therefore has no problem printing a[6]. However, in the second</font></div><div><font color="#919191"># char array there is no the string termination, so it will continue till it finds ‘\0’ in the first string.</font></div><div><font color="#919191"># If it does not find any “\0”, it will print a garbage string at the end.</font></div><div><font color="#919191"># Remember, search for “\0” propogates from bottom to top !</font></div><div><br/></div><div><font color="#919191">// Using pointers:</font></div><div><font color="#008f00">char</font> <font color="#ff2600">*</font><font color="#9437ff">a</font> = <font color="#941100">“Hello”;</font><font color="#797979">  /* This will be located in the “read only” memory, so you can NOT modify it */</font></div><div><br/></div><div><font color="#797979">// The below code also won’t let you modify the string:</font></div><div><font color="#009051">char</font> <font color="#ff2600">*</font><font color="#d783ff">a </font>= <b>malloc</b>(6*<font color="#941100">sizeof</font>(<font color="#008f00">char</font>));  <font color="#797979"> /* Allocates 6 bytes of memory and returns the pointer a */</font></div><div><b>printf</b>(<font color="#941100">“The address of ‘a’  before is</font> <font color="#ff85ff">%p</font>\<font color="#941100">n”</font>, <font color="#ff85ff">a</font>); </div><div><font color="#ff85ff">a</font> = <font color="#941100">“Hello”</font>; <font color="#797979"> / * This will again puts “Hello” into the read only memory and poits “a” to it */</font></div><div><b>printf</b>(<font color="#941100">“The address of ‘a’  after is</font> <font color="#9437ff">%p</font><font color="#941100">\n”</font>, <font color="#ff85ff">a</font>); <br/></div><div><font color="#797979">// So, you have two different addresses and will end up not using the allocated memory.</font></div><div><br/></div><div># The most of the time we don’t change the values of strings.</div><div># If we need to store the string data into memory, we have to use the  strncpy function from the</div><div># &lt;string.h&gt; library. </div><div><b>#iclude</b> <font color="#0433ff">&lt;string.h&gt;</font></div><div><font color="#008f00">char</font> *<font color="#9437ff">a =</font> <b>malloc</b>(6*<font color="#941100">sizeof</font>(<font color="#008f00">char</font>));</div><div><b>strncpy</b>(<font color="#9437ff">a,</font> <font color="#941100">“Hello”</font>, 5); <font color="#919191"> /* 5 elements which does not include ‘\0’  */</font></div><div><font color="#9437ff">a[5]</font> = ‘\0’;  <font color="#919191"> /* Remember the strncpy will not add the 0x00 termination */  </font></div><div><br/></div><div>// You can have a pointer pointing to a string ( or an array of characters)</div><div>char s[ ] = “My school”;</div><div>char *sp = &amp;s;     /* By default the pointer pointes to the first element of string = &amp;s[0] */</div><div>char *sk = &amp;s[3];</div><div>printf(“ The address of s[3] (or value of sk) : p\n”, sk);  /* Prints the address of which pointer points */ </div><div>printf(“ The value of the string the ‘sk points to  : %s\n”, sk);    /* Prints “school” */</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div></en-note>
