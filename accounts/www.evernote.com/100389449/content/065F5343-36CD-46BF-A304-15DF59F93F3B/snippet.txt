# Traditional way of computing the square of 'x': # def square(x): # return x*x # f = square(2) # print(f) # The Lambda fuction method in the usual way: f = lambda x : x*x print(f(8)) # You do a lot more tricks with the Lambda fucntion: # Return 'x' if its bigger than 'y' else return 'y' result = lambda x, y: x if x >y else y print(result(2,3)) # Decoratrors def decoration_func(orig_func): def wrapper_func(): print("We are executing this code from the 'wrapper_func:'{}".format(orig_func.__name__)) return wrapper_func @decoration_func def display(): print("The display fuction executed here") display() # Filter # With the "filter" function: List = [1,2,3,4,5,6] # condition = lambda n : n > 2 and n < 5 Filtered = filter(lambda n : n > 2 and n < 5, List) # You need to convert to the list: print(list(Filtered)) # Map List = [1,2,3,4] m = map(lambda x: x*x, List) # You need to convert to list first print (list(m)) # Output: [1, 4, 9, 16] # Zip L1 = [1,2,3] L2 = ['a','b','c'] print(list(zip(L