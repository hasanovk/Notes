Nested Objects In this example we will describe how to deserialise nested objects, that is, objects within other objects. Here we will introduce a new entity, the author. A book, together with the title and ISBN can have a list of authors. On the other hand every author can have many books. The JSON object that will be using in this example differs from the previous one to cater for the new entity as shown next: { 'title': 'Java Puzzlers: Traps, Pitfalls, and Corner Cases', 'isbn': '032133678X', 'authors':[ { 'id': 1, 'name': 'Joshua Bloch' }, { 'id': 2, 'name': 'Neal Gafter' } ] } The structure of the JSON object was changed slightly and instead of primitives we have the authors as JSON objects as shown in the following image. Book and Authors Json Objects Hierarchy We still have one book, only this time we have a more complex and detailed JSON object. Together with a name, the author also has an id. A new class called Author is added to the model and the Book class now uses it to sav