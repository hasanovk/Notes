<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note><div style="-evernote-webclip:true"><br/><div style="font-size: 16px; display: inline-block;"><div style="font-family:sans-serif;overflow-x:hidden;"><div style="font-family:medium-ui-sans-serif-text-font,-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,Oxygen,Ubuntu,Cantarell,&quot;Open Sans&quot;,&quot;Helvetica Neue&quot;,sans-serif;letter-spacing:0px;font-weight:400;font-style:normal;text-rendering:optimizelegibility;font-feature-settings:&quot;liga&quot;;color:rgba(0, 0, 0, 0.8);font-size:18px;line-height:1.4;overflow-x:hidden;"><div style="background:rgb(255, 255, 255) none repeat scroll 0% 0%;"><div style="box-sizing:border-box;"><div style="outline:0px none;background-color:rgb(255, 255, 255);"><span><div style="box-sizing:border-box;overflow:hidden;"><div style="outline:0px none;overflow-wrap:break-word;"><div><div><div style="box-sizing:border-box;"><h1 style="margin:0px;font-size:40px;font-family:medium-content-sans-serif-font,&quot;Lucida Grande&quot;,&quot;Lucida Sans Unicode&quot;,&quot;Lucida Sans&quot;,Geneva,Arial,sans-serif;letter-spacing:-0.028em;font-weight:700;font-style:normal;color:rgba(0, 0, 0, 0.8);margin-left:-2.5px;line-height:1.04;margin-top:0px;"><strong style="font-weight:700;">Android Boot and Recovery Images</strong></h1><div style="display:block;margin:0px;position:relative;clear:both;outline:0px none;box-sizing:border-box;z-index:100;margin-top:44px;"><div style="position:relative;width:100%;margin:0px auto;display:block;max-width:687px;max-height:375px;"><div style="display:block;padding-bottom:54.6%;"></div><div style="display:block;margin:auto;box-sizing:border-box;transition:background 0.2s ease 0s;max-width:100%;background:rgba(0, 0, 0, 0) none repeat scroll 0% 0%;position:absolute;top:0px;left:0px;width:100%;height:100%;"><en-media type="image/png" hash="eb4fc06641c5fad608ce8e298be7fcbf" width="75" height="40" style="vertical-align:baseline;display:block;position:absolute;top:0px;left:0px;width:100%;height:100%;margin:auto;box-sizing:border-box;backface-visibility:hidden;visibility:hidden;opacity:0;transition:visibility 0s linear 0.5s, opacity 0.1s ease 0.4s;"></en-media><en-media type="image/png" hash="4e6971045c5f723e8395bbf6a9d8c83f" width="687" height="375" style="border:0px none;display:block;position:absolute;top:0px;left:0px;width:100%;height:100%;margin:auto;box-sizing:border-box;z-index:100;backface-visibility:hidden;visibility:visible;opacity:1;transition:visibility 0s linear 0s, opacity 0.4s ease 0s;"></en-media></div></div></div><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:38px;">To fully grasp the role the Android boot and recovery images play, we first need to understand the general boot-up process of an Android phone. While embedded software is no longer part of my day-to-day work at TextNow, I used to wear the embedded-engineer hat in one of my previous jobs and I dabble with embedded electronics in my spare time, so I am intimately familiar with modern microprocessor boot-up routines. I must caution you that this is a very technical post, but one that is hopefully useful to somebody looking for a reference material on how this all fits together, with links to where to delve more in-depth if required. This type of post would have been very useful when I was learning it :)</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;"><strong style="font-weight:700;">The Android Boot-Up Process</strong></p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">When power and reset is applied to the processor, it wakes up and needs to figure out what to do. In modern processors, there is usually a very small program baked-in to the processor whose function is to verify the next component’s integrity. This first component is sometimes referred to as the <em style="font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">secure boot ROM, </em>and its job is to ensure the next component it loads is trusted, verified software. This prevents unwanted tampering of the system software and, as such, increases the security of the device. The verification usually involves some sort of cryptographic cipher using a public/private key scheme, with the private key usually kept a closely guarded secret by the manufacturer. <strong style="font-weight:700;">Note:</strong> usually the public key is programmed in at assembly time by the phone manufacturer and its contents can never be changed, thereby requiring that processor to always run a signed bootloader, with the private counterpart of the public key burned in at assembly time.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">The next component loaded by the secure boot ROM is the what people commonly refer to as the <em style="font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">bootloader</em>. The bootloader, as I mentioned, is usually signed with the phone manufacturer’s private key, and it has a few jobs:</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">1. Load a boot image from non-volatile memory (usually NAND flash nowadays) into volatile memory (RAM) and run it.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">2. Optionally, that image needs to be cryptographically verified before being loaded (as is the case with more and more phones these days which don’t even provide a way to unlock the bootloader to run unsigned images).</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">3. Provide the ability to flash new boot and other images to the non-volatile memory for future upgrades and recovery from failure.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">4. Display some sort of information on the screen, and optionally provide an interface for the user to interact with. This is commonly known as <em style="font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">fastboot mode</em> on some Motorola, Google, and other manufacturer’s devices.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;"><strong style="font-weight:700;">Android Boot Images</strong></p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">We now come to the final component of the boot-up process — loading a boot or recovery image into RAM and running it.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">Technically speaking, there are no structural differences between boot and recovery images. The only difference is which kernel and which initial ramdisk is loaded, but they are packaged the same. We will come back to how these are packaged to make a neat and tidy boot image.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">There are a few sub-steps involved in running the boot image:</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">1. Cryptographic verification</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">2. Loading of the (Linux) kernel at the required memory address</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">3. Loading of the initial ramdisk at the required memory address</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">4. Jump to the start address of the kernel</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">The cryptographic verification is usually manufacturer-specific and it is typically very hard to reverse-engineer this method, though not impossible — it’s been done before for certain phones (for example, older Kit-Kat era LG phones).</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">The kernel is the heart of the operating system, as it ticks its constant heartbeat of interrupts and events which keep a modern operating system running. This magic has very meager origin as a simple chunk of bytes that was compiled in such a way to wake up and start running from a particular address of memory. This address varies depending on the particular phone and memory layout. Once execution starts, the kernel will start loading drivers and setup more advanced facilities so that it can start running some of its own programs.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">In and of itself, the kernel wouldn’t know what to do once it’s loaded. It would sit there and do nothing. But what the Linux kernel <em style="font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">expects</em> is an initial ramdisk at a predefined memory address. This ramdisk contains a very rudimentary and usually read-only filesystem which contains the most basic root filesystem possible, and a file under <em style="font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">/sbin/init</em> which the kernel executes as the last thing it does as part of initialization. This <a href="https://android.googlesource.com/platform/system/core/+/master/init/init.cpp" rel="noopener" target="_blank" style="background-color:transparent;color:inherit;text-decoration:none;background-image:linear-gradient(to bottom, rgba(0, 0, 0, 0.6) 50%, rgba(0, 0, 0, 0) 50%);background-repeat:repeat-x;background-size:2px 0.1em;background-position:0px 1.07em;"><em style="font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">init</em></a><em style="font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;"> </em>program starts running some scripts that start other programs talking to each other and finally deliver the full experience the system has to offer.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">So now we come back to the difference between a boot and recovery image. While the kernel sometimes is the same as the boot image, the recovery image ramdisk has a distinct sets of <em style="font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">init</em> scripts which don’t start the Java VM, but instead start a small C program called (did you guess it?) <em style="font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">recovery</em>. Recovery displays a limited user interface that allows the user to start the system, factory reset, clear the cache partition, etc. Some custom recoveries have their own program that offers even more functionality.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;"><strong style="font-weight:700;">Packing an Android Boot Image</strong></p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">The Android boot images have a <a href="https://github.com/android/platform_system_core/blob/master/mkbootimg/bootimg.h" rel="noopener" target="_blank" style="background-color:transparent;color:inherit;text-decoration:none;background-image:linear-gradient(to bottom, rgba(0, 0, 0, 0.6) 50%, rgba(0, 0, 0, 0) 50%);background-repeat:repeat-x;background-size:2px 0.1em;background-position:0px 1.07em;">specific structure</a> whose internal organization reflects the memory in which it resides, namely flash. Flash is a specific type of memory that is not random-access, but is read in pages whose sizes vary depending on the particular chip, often within the 4K bytes range. For this reason, the boot image’s components are aligned to the page size, so that loading is more efficient (amongst other reasons I won’t go into detail here). The structure of the boot image is as shown in the figure below:</p><div style="display:block;margin:0px;position:relative;clear:both;outline:0px none;box-sizing:border-box;z-index:100;margin-top:43px;"><div style="position:relative;width:100%;margin:0px auto;display:block;max-width:396px;max-height:134px;"><div style="display:block;padding-bottom:33.800000000000004%;"></div><div style="display:block;margin:auto;box-sizing:border-box;transition:background 0.2s ease 0s;max-width:100%;background:rgba(0, 0, 0, 0) none repeat scroll 0% 0%;position:absolute;top:0px;left:0px;width:100%;height:100%;"><en-media type="image/png" hash="2474d9c55110d6690260d2d67959a46f" width="75" height="25" style="vertical-align:baseline;display:block;position:absolute;top:0px;left:0px;width:100%;height:100%;margin:auto;box-sizing:border-box;backface-visibility:hidden;visibility:hidden;opacity:0;transition:visibility 0s linear 0.5s, opacity 0.1s ease 0.4s;"></en-media><en-media type="image/png" hash="bf503fe983dcfcda40203527b8c4ef9d" width="396" height="134" style="border:0px none;display:block;position:absolute;top:0px;left:0px;width:100%;height:100%;margin:auto;box-sizing:border-box;z-index:100;backface-visibility:hidden;visibility:visible;opacity:1;transition:visibility 0s linear 0s, opacity 0.4s ease 0s;"></en-media></div></div><div style="display:block;position:relative;left:0px;width:100%;top:0px;margin-top:10px;color:rgba(0, 0, 0, 0.6);outline:0px none;text-align:center;z-index:300;font-family:medium-content-sans-serif-font,&quot;Lucida Grande&quot;,&quot;Lucida Sans Unicode&quot;,&quot;Lucida Sans&quot;,Geneva,Arial,sans-serif;font-weight:300;font-style:normal;font-feature-settings:&quot;liga&quot;, &quot;lnum&quot;;font-size:14px;line-height:1.4;letter-spacing:0px;"><em style="font-style:normal;font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">The layout of an Android boot image</em></div></div><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:38px;">I should mention something of this second stage. To be completely honest, I do not know its <em style="font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">raison d’être</em>, the original intent of it. I have seen it used in more recent times to hold the kernel’s device tree block (DTB, another long and deeply technical topic best explained elsewhere) by certain phone manufacturers. The older kernels had the DTB as part of the kernel image, now they’ve split it out into its own separate piece to make it easier to build a more generic kernel that can be adapted to a variety of hardware configurations within the same architecture.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">Moving swiftly along (and back!) to the boot image header, this primarily tells the bootloader how to load the components of the boot image, and it looks something like this:</p><div style="display:block;margin:0px;position:relative;clear:both;outline:0px none;box-sizing:border-box;z-index:100;margin-top:43px;"><div style="position:relative;width:100%;margin:0px auto;display:block;max-width:700px;max-height:367px;"><div style="display:block;padding-bottom:52.400000000000006%;"></div><div style="display:block;margin:auto;box-sizing:border-box;transition:background 0.2s ease 0s;cursor:zoom-in;max-width:100%;background:rgba(0, 0, 0, 0) none repeat scroll 0% 0%;position:absolute;top:0px;left:0px;width:100%;height:100%;"><en-media type="image/png" hash="c5eab485eae7539406c4381f32af139f" width="75" height="37" style="vertical-align:baseline;display:block;position:absolute;top:0px;left:0px;width:100%;height:100%;margin:auto;box-sizing:border-box;backface-visibility:hidden;visibility:hidden;opacity:0;transition:visibility 0s linear 0.5s, opacity 0.1s ease 0.4s;"></en-media><en-media type="image/png" hash="52109dbe81a8b362e52becc8e09781ca" width="700" height="367" style="border:0px none;display:block;position:absolute;top:0px;left:0px;width:100%;height:100%;margin:auto;box-sizing:border-box;z-index:100;backface-visibility:hidden;visibility:visible;opacity:1;transition:visibility 0s linear 0s, opacity 0.4s ease 0s;"></en-media></div></div><div style="display:block;position:relative;left:0px;width:100%;top:0px;margin-top:10px;color:rgba(0, 0, 0, 0.6);outline:0px none;text-align:center;z-index:300;font-family:medium-content-sans-serif-font,&quot;Lucida Grande&quot;,&quot;Lucida Sans Unicode&quot;,&quot;Lucida Sans&quot;,Geneva,Arial,sans-serif;font-weight:300;font-style:normal;font-feature-settings:&quot;liga&quot;, &quot;lnum&quot;;font-size:14px;line-height:1.4;letter-spacing:0px;"><em style="font-style:normal;font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">Android boot image header</em></div></div><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:38px;">As you can see, it has a few “book-keeping” fields about how large the other sub-components of the boot image are, what address to load them into, etc.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">It also has a field called <em style="font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">magic</em>. The magic field is simply a string of well-known characters to identify this as an Android boot image. In this case the string is “ANDROID!”, which fits neatly into 8 bytes.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">Somebody familiar with the Linux kernel and boot-up process will recognize the kernel tags and command line argument fields as ways to pass more custom information into the kernel, such as where the console should be, and where to find that initial ramdisk from where to load its <em style="font-feature-settings:&quot;liga&quot;, &quot;salt&quot;;">init</em> program.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;"><strong style="font-weight:700;">Working With Android Boot Images</strong></p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">So, since we have custom recovery and boot images for our Android phones (such as TWRP, CWM, etc.), obviously, someone had to create their own recovery image or modify an already existing boot image. Most of the work was done using the already open-sourced Google Android code, but there only was code there to create a boot image from its components. There was no tool to unpack a boot image for modification. Now, you can use a tool like <a href="https://github.com/osm0sis/mkbootimg" rel="noopener" target="_blank" style="background-color:transparent;color:inherit;text-decoration:none;background-image:linear-gradient(to bottom, rgba(0, 0, 0, 0.6) 50%, rgba(0, 0, 0, 0) 50%);background-repeat:repeat-x;background-size:2px 0.1em;background-position:0px 1.07em;">https://github.com/osm0sis/mkbootimg</a> to pack and unpack boot images and change out the kernel, or modify the initial ramdisk.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;"><strong style="font-weight:700;">Further Areas to Explore</strong></p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">There are some interesting aspects relating to the initial ramdisk that apply to both the boot and recovery Android images that this article won’t cover in detail due to its already burgeoning size, but that are worth mentioning.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">● The filesystem that initial ramdisks use is usually a gzipped <a href="https://en.wikipedia.org/wiki/Cpio" rel="noopener" target="_blank" style="background-color:transparent;color:inherit;text-decoration:none;background-image:linear-gradient(to bottom, rgba(0, 0, 0, 0.6) 50%, rgba(0, 0, 0, 0) 50%);background-repeat:repeat-x;background-size:2px 0.1em;background-position:0px 1.07em;">CPIO</a> archive</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">● You can pack and unpack the initial ramdisks and modify them</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">● init scripts are written in their own domain specific language (DSL) and you can read their <a href="https://android.googlesource.com/platform/system/core/+/master/init/README.md" rel="noopener" target="_blank" style="background-color:transparent;color:inherit;text-decoration:none;background-image:linear-gradient(to bottom, rgba(0, 0, 0, 0.6) 50%, rgba(0, 0, 0, 0) 50%);background-repeat:repeat-x;background-size:2px 0.1em;background-position:0px 1.07em;">README</a> for more information</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">● Default SELinux file contexts and policy usually reside in the ramdisk’s root</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">We can spend many hours talking about and playing with the above items, but at least for now I will leave them as an exercise to the keen reader.</p><p style="margin:0px;margin-bottom:0px;font-family:medium-content-serif-font,Georgia,Cambria,&quot;Times New Roman&quot;,Times,serif;font-weight:400;font-style:normal;font-size:21px;line-height:1.58;letter-spacing:-0.003em;margin-top:29px;">Until next time!</p></div></div></div></div></div></span></div></div></div></div></div></div><br/></div></en-note>