<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note><div><span style="font-weight: bold; font-size: 24px;">Git Basics</span></div><div><br/></div><div><en-media hash="bcc0305ed2f297ceaa354de8bf607cf1" type="image/png"/><br/></div><div><br/></div><ol start="1"><li><span style="font-weight: bold; color: rgb(4, 51, 255);">Initializing a Repository</span></li></ol><div><span style="color: rgb(121, 121, 121);"># We have a project and want to create the git repository</span></div><div><span style="color: rgb(0, 84, 147);">MyGitProject&gt;</span> <span style="font-weight: bold;">git </span><span style="color: rgb(0, 143, 0);">init</span></div><div><br/></div><ol start="2"><li><span style="font-weight: bold; color: rgb(4, 51, 255);">Adding and Committing </span></li></ol><div><span style="color: rgb(146, 146, 146);"># We already had some folders and files in our folder</span></div><div><span style="color: rgb(146, 146, 146);"># Lets add these folders and files into the repository so we can track them</span></div><div>=&gt; <span style="font-weight: bold;">git </span><span style="color: rgb(255, 64, 255);">add . </span>  <span style="color: rgb(121, 121, 121);"># &quot;</span><span style="color: rgb(255, 64, 255);">.</span><span style="color: rgb(121, 121, 121);">&quot;  means add everything inside the project folder</span></div><div><span style="color: rgb(146, 146, 146);"># So far everything in the staging index and no branch is created yet.</span></div><div><span style="color: rgb(146, 146, 146);"># Lets commit the changes:</span></div><div>=&gt;<span style="font-weight: bold;"> git</span><span style="font-weight: bold; color: rgb(255, 64, 255);"> </span><span style="color: rgb(255, 64, 255);">commit</span> <span style="color: rgb(148, 17, 0);">-m</span> &quot;<span style="color: rgb(148, 17, 0);">Initial commit for the C programming project</span>&quot;</div><div><span style="color: rgb(146, 146, 146);"># Hint: The option “-am” does add and commit : =&gt; git commit -am “message&quot;</span></div><div><span style="color: rgb(146, 146, 146);"># Now we have the master branch created</span></div><div>=&gt;<span style="font-weight: bold;"> git</span> <span style="color: rgb(255, 64, 255);">branch</span></div><ul><li>   <span style="color: rgb(0, 143, 0);">master</span></li></ul><div><span style="color: rgb(146, 146, 146);"># After the commit command everything will move to the repository.</span></div><div>=&gt;<span style="font-weight: bold;"> git</span> <span style="color: rgb(255, 64, 255);">status </span></div><div><span style="font-style: italic; color: rgb(121, 121, 121);">On branch master</span></div><div><span style="font-style: italic; color: rgb(121, 121, 121);">nothing to commit, working tree clean</span></div><div><br/></div><ol start="3"><li><span style="color: rgb(4, 51, 255);"> </span><span style="color: rgb(4, 51, 255); font-weight: bold;">Viewing the Commits</span></li></ol><div>=&gt;<span style="font-weight: bold;"> git </span><span style="color: rgb(255, 64, 255);">log</span>            <span style="color: rgb(146, 146, 146);"># this will show all changes</span></div><div>=&gt;<span style="font-weight: bold;"> git</span><span style="font-weight: bold; color: rgb(255, 64, 255);"> </span><span style="color: rgb(255, 64, 255);">log</span> <span style="font-weight: bold;">HEAD</span> <span style="color: rgb(146, 146, 146);"># show where the project's pointer is pointing to</span></div><div> </div><div><br/></div><ol start="4"><li><span style="font-weight: bold; color: rgb(4, 51, 255);">Rename and Delete files from the Repository</span></li></ol><div><span style="color: rgb(146, 146, 146);"># To rename a file use the UNIX “mv” command</span></div><div>=&gt;<span style="font-weight: bold;"> git</span><span style="color: rgb(255, 64, 255);"> mv</span> <span style="color: rgb(0, 144, 81);">&lt;file.txt&gt;</span> <span style="color: rgb(0, 150, 255);">&lt;new_file.txt&gt;</span></div><div>=&gt; <span style="font-weight: bold;">git </span><span style="color: rgb(255, 64, 255);">commit</span> <span style="font-weight: bold; color: rgb(148, 17, 0);">-m</span> “<span style="color: rgb(148, 17, 0);">We renamed the file</span>”</div><div><br/></div><div><span style="color: rgb(146, 146, 146);"># To remove a file use the “rm” command</span></div><div><span style="color: rgb(146, 146, 146);"># </span><span style="color: rgb(255, 38, 0);">Warning !!!</span><span style="color: rgb(146, 146, 146);">: This command will a file from the repositroy and from the poject folder,</span></div><div><span style="color: rgb(146, 146, 146);"># so, if you want to keep it you need copy it to somewhere outside of the project folder.</span></div><div>=&gt; <span style="font-weight: bold;">git </span><span style="color: rgb(255, 38, 0);">rm</span> <span style="color: rgb(0, 144, 81);">&lt;Test.txt&gt; </span>     <span style="color: rgb(146, 146, 146);"># It works like the UNIX remove command</span></div><div>=&gt; <span style="font-weight: bold;">git </span><span style="color: rgb(255, 64, 255);">commit</span> <span style="font-weight: bold; color: rgb(148, 17, 0);">-m</span> “<span style="color: rgb(148, 17, 0);">We just deleted ’Test.txt file.</span>&quot;</div><div><br/></div><ol start="4"><li><span style="font-weight: bold; color: rgb(4, 51, 255);">Undoing Changes</span></li></ol><div>    # Case 1: Suppose we have change a file in our working directory</div><div>    #               but did not commited yet. For some reason, we want discard the chnages.</div><div>    =&gt; git status  # This command will tell you what file modified and how to discard the change</div><div>    =&gt; git checkout -- &lt;name_of_modified_file.txt&gt;</div><div><br/></div><div>    # Case 2: After moving to the staging (i.e. we “add” the file, so now its in the staging)</div><div>    =&gt; git status # Shows that our file is in the staging. It aslo tells us how to unstage.</div><div>    =&gt; git reset HEAD &lt;name_of_modified_file.txt&gt;     # Unstage</div><div>    =&gt; git checkout -- &lt;name_of_modified_file.txt&gt;     # Discard changes</div><div><br/></div><div>    # Case 3: After commiting the change (i.e. its now in the repository)</div><div>    #              You can undo the change ONLY to the last committed file (i.e. where</div><div>    #               HEAD is pointing to. This applies commited meassages too. No message</div><div>    #               other than the last one can be change!</div><div>    =&gt; git add  &lt;name_of_modified_file.txt&gt;  # After you modified the file</div><div>    =&gt; git commit —amend -m “The last commit modfied”</div><div>    =&gt; git log      # Check the log file</div><div><br/></div><ol start="5"><li><span style="font-weight: bold; color: rgb(4, 51, 255);">Undoing commited changes using the HEAD pointer</span></li></ol><div>    # Soft Reset: The HEAD pointer moves to a specified location</div><div>    #                    while not changing the staging index or working directory.</div><div>    # To see where the HEAD pointer is pointing at the moment:</div><div>    =&gt; <span style="font-weight: bold;">cat </span><span style="font-weight: bold; color: rgb(148, 17, 0);">.git/</span><span style="color: rgb(0, 150, 255);">HEAD</span></div><div>    <span style="color: rgb(146, 144, 0);">ref: refs/heads/master</span></div><div>    =&gt; <span style="font-weight: bold;">cat</span> <span style="color: rgb(148, 17, 0);">.git/refs/heads/</span><span style="color: rgb(4, 51, 255);">master</span><span style="color: rgb(148, 17, 0);"> </span> </div><div>    <span style="color: rgb(146, 144, 0);">8144c629183bff77331b43255e25a62dd4541a2c      </span><span style="color: rgb(146, 146, 146);"># SHA </span></div><div>    # Now find the SHA you want to soft reset  ( use the git log )</div><div>    =&gt; git reset --soft <span style="color: rgb(79, 143, 0);">2d65e27a689c381 </span>   # You can copy the part of SHA    </div><div>    =&gt; git diff --staged  # Shows the differnce between current working directory and the point where HEAD is.</div><div>    # Again, nothing has changed . We can still move back the HEAD pointer where it was.</div><div><br/></div><div>    # Mixed Reset: The staging index changes to match repositroy, but working</div><div>    #  (default)         directory remains unchange.</div><div><br/></div><div>    # Hard Reset: The index and working will be the same as where the HEAD pointer</div><div>                            points. Be carefull!</div><div><br/></div><ol start="6"><li><span style="font-weight: bold; color: rgb(4, 51, 255);">Ignoring Files</span></li></ol><div>   <span style="color: rgb(146, 146, 146);"> # There are two ways of ignoring files</span></div><div><span style="color: rgb(146, 146, 146);">    # Note: The files which were exist before you start ignoring will remain. So, you have to delete manually! </span></div><div>    <span style="font-weight: bold;"># Method 1: </span><span style="color: rgb(146, 146, 146);">You create a file called “</span><span style="color: rgb(146, 146, 146); font-weight: bold;">.gitignore</span><span style="color: rgb(146, 146, 146);">” inside of your project directory.</span></div><div><span style="font-weight: bold;">    </span><span style="color: rgb(0, 145, 147);"># ————— .gitignore file ————— #</span></div><div><span style="color: rgb(0, 145, 147);">    # This is comment : To ignore all the jpeg files:</span></div><div><span style="color: rgb(0, 145, 147);">     </span><span style="color: rgb(0, 145, 147); font-weight: bold;">*.jpeg</span></div><div><span style="color: rgb(0, 145, 147);">    # Ignore the MAC OS “.DS_Stote</span></div><div><span style="color: rgb(0, 145, 147); font-weight: bold;">    </span><span style="color: rgb(0, 145, 147); font-weight: bold;">.DS_Store</span></div><div><span style="color: rgb(0, 145, 147);">    # To ignore intire folder and with its contents:</span></div><div><span style="color: rgb(0, 145, 147);">    </span><span style="color: rgb(0, 145, 147); font-weight: bold;"> Temp/</span></div><div><span style="color: rgb(0, 145, 147);">    </span><span style="color: rgb(0, 145, 147); font-weight: bold;"> Assets/images/</span></div><div><span style="color: rgb(0, 145, 147);">     # If you want to track a file or folder inside other folders, use “</span><span style="color: rgb(0, 145, 147); font-weight: bold;">!</span><span style="color: rgb(0, 145, 147);">” front of</span></div><div><span style="color: rgb(0, 145, 147);">    </span><span style="color: rgb(0, 145, 147); font-weight: bold;"> Testing/</span></div><div><span style="color: rgb(0, 145, 147);">    </span><span style="color: rgb(0, 145, 147); font-weight: bold;"> !Testing/website/index.html</span></div><div><span style="color: rgb(0, 145, 147);">    </span><span style="color: rgb(0, 145, 147); font-weight: bold;"> !Testing/website/index.php</span></div><div><br/></div><div>     <span style="color: rgb(146, 146, 146); font-weight: bold;"># Recommended ignored files are:</span></div><div><span style="color: rgb(146, 146, 146);">     # - Compiled source codes</span></div><div><span style="color: rgb(146, 146, 146);">     # - Packages and compressed files</span></div><div><span style="color: rgb(146, 146, 146);">     # - Logs and databases</span></div><div><span style="color: rgb(146, 146, 146);">     # - Operating system generated files (like “.DS_Store”)</span></div><div><span style="color: rgb(146, 146, 146);">     # - Assets (such as images, PDF files or videos)</span></div><div><span style="color: rgb(146, 146, 146);">     # For more info visit:</span></div><div><span style="color: rgb(146, 146, 146);">     # </span><a style="color: rgb(146, 146, 146);" href="https://help/github.com/articles/ignoring-files">https://help.github.com/articles/ignoring-files</a></div><div><span style="color: rgb(146, 146, 146);">     # </span><a style="color: rgb(146, 146, 146);" href="https://github.com/github/gitignore">https://github.com/github/gitignore</a><span style="color: rgb(146, 146, 146);"> </span></div><div><br/></div><div>     <span style="font-weight: bold;"># Method 2:</span> <span style="color: rgb(146, 146, 146);">Globally ignoring files. Your project will not track the ingored file,</span></div><div><span style="color: rgb(146, 146, 146);">     # but the operating system will. This means who ever pull your repository have</span></div><div><span style="color: rgb(146, 146, 146);">     # to deal with ignoring files. </span></div><div><span style="font-weight: bold;">     </span><span style="color: rgb(146, 146, 146);"># The following command you tell the git where we keep our gitignore file.</span></div><div><span style="color: rgb(146, 146, 146);">     # You can name it whatever you want. Don’t forget to create one!</span></div><div>     =&gt;<span style="font-weight: bold;">git</span> <span style="color: rgb(255, 64, 255);">config</span> <span style="color: rgb(148, 17, 0);">--global </span><span style="color: rgb(0, 84, 147);">core.excludesfile</span> <span style="color: rgb(148, 17, 0);">/Users/khasanov/</span><span style="font-weight: bold; color: rgb(0, 145, 147);">.gitignore_global</span></div><div><span style="font-weight: bold;">     </span><span style="color: rgb(146, 146, 146);"># The format is the same. So you copy “.gitignore” from your repository and past it</span></div><div><span style="color: rgb(146, 146, 146);">     # into “~//.gitignore_global” and then you can delete the project ignore file if you want.</span></div><div><br/></div><div><br/></div><ol start="7"><li><span style="font-weight: bold; color: rgb(4, 51, 255);">BRANCHES: Create, Switch , Rename and Delete Branches</span></li></ol><div><br/></div><div>    <span style="color: rgb(146, 146, 146);"># When you just create a branch the HEAD will be still pointing to the last commit.</span></div><div><span style="color: rgb(146, 146, 146);">    # Lets say you’ve created a new branch while in the master branch, then the HEAD</span></div><div><span style="color: rgb(146, 146, 146);">    # pointer will be still pointing to the lasr commit in the master even you switch to</span></div><div><span style="color: rgb(146, 146, 146);">    # the new branch. If you start commiting new changes in the new branch then the HEAD</span></div><div><span style="color: rgb(146, 146, 146);">    # will point to the new branch.</span><span style="color: rgb(146, 146, 146);">  </span></div><div><span style="color: rgb(146, 146, 146);">    </span><span style="color: rgb(146, 146, 146);"># To see what branch you are in:</span></div><div>    =&gt; <span style="font-weight: bold;">git</span> <span style="color: rgb(148, 55, 255);">branch</span></div><div>    <span style="color: rgb(146, 146, 146);"># To create a branch:</span></div><div>    =&gt;<span style="font-weight: bold;"> git</span><span style="font-weight: bold; color: rgb(148, 55, 255);"> </span><span style="color: rgb(148, 55, 255);">branch</span> <span style="color: rgb(4, 51, 255);">&lt;branch_name&gt;</span>    <span style="color: rgb(146, 146, 146);"># This will create the new branch below current one.</span></div><div>    <span style="color: rgb(146, 146, 146);"># To switch a new branch:</span></div><div><span style="color: rgb(146, 146, 146);">    # A branch must be clean before switching . If it is not then you will be given 3 options:</span></div><div><span style="color: rgb(146, 146, 146);">    # (a) Ignore the changes (b) Add/Commit changes (c) Save it in the stash</span></div><div>    =&gt;<span style="font-weight: bold;"> git</span> <span style="color: rgb(148, 55, 255);">branch</span> <span style="color: rgb(0, 144, 81);">checkout</span> <span style="color: rgb(4, 51, 255);">&lt;branch_name&gt;</span></div><div>    <span style="color: rgb(146, 146, 146);"># To create and switch the same time use the &quot;</span></div><div>    =&gt;<span style="font-weight: bold;"> git</span> <span style="color: rgb(148, 55, 255);">branch</span> <span style="color: rgb(0, 144, 81);">checkout</span> <span style="font-weight: bold;">-b</span> <span style="color: rgb(4, 51, 255);">&lt;branch_name&gt;</span></div><div>    <span style="color: rgb(146, 146, 146);"># To see the differences between branches, use the “dot..dot” option</span></div><div>    =&gt; <span style="font-weight: bold;">diff --clor-words</span> <span style="color: rgb(4, 51, 255);">&lt;branch A&gt;</span><span style="font-weight: bold;">..</span><span style="color: rgb(0, 150, 255);">&lt;branch B&gt;</span></div><div>   <span style="color: rgb(146, 146, 146);"> # To rename ( or move) a branch:</span></div><div>    =&gt;<span style="font-weight: bold;"> git</span> <span style="color: rgb(148, 55, 255);">branch</span> <span style="font-weight: bold;">-m</span> <span style="color: rgb(4, 51, 255);">&lt;branch_name&gt;</span> &lt;<span style="color: rgb(0, 150, 255);">branch_new_name&gt;</span></div><div>    <span style="color: rgb(146, 146, 146);"># To delete a branch:</span></div><div>    =&gt; <span style="font-weight: bold;">git</span><span style="color: rgb(148, 55, 255);"> branch</span> -<span style="font-weight: bold;">d </span><span style="color: rgb(4, 51, 255);">&lt;branch_name&gt;  </span></div><div>    =&gt; <span style="font-weight: bold;">git</span><span style="color: rgb(148, 55, 255);"> branch </span><span style="font-weight: bold;">--</span>delete <span style="color: rgb(4, 51, 255);">&lt;branch_name&gt;</span></div><div><br/></div><div><br/></div><ol start="8"><li><span style="font-weight: bold; color: rgb(4, 51, 255);">Merging BRANCHES</span></li></ol><div><br/></div><div><span style="font-weight: bold;">    </span><span style="color: rgb(146, 146, 146);"># Case1 : Fast-Forward Merging</span></div><div><span style="color: rgb(146, 146, 146);">    # In this case you have made some changes in your branch and you want these</span></div><div><span style="color: rgb(146, 146, 146);">    # changes to be in the master branch as well. No changes were made in the master</span></div><div><span style="color: rgb(146, 146, 146);">    # before do merge.</span></div><div><en-media hash="0965061497ac3d5e655bf06fa77c5e5e" type="image/png"/><br/></div><div>    <span style="color: rgb(146, 146, 146);"># First you need to be in the master brach:</span></div><div>    =&gt; <span style="font-weight: bold;">git</span>  <span style="color: rgb(0, 143, 0); font-weight: bold;">master </span><span style="color: rgb(0, 143, 0);">   </span>     <span style="color: rgb(146, 146, 146);"># Receiver</span></div><div>    =&gt; <span style="font-weight: bold;">git</span> <span style="color: rgb(255, 64, 255);">merge</span> <span style="font-weight: bold; color: rgb(0, 150, 255);">&lt;your_branch&gt;</span>     <span style="color: rgb(146, 146, 146);"># You retrieve a change from the </span><span style="color: rgb(146, 146, 146); font-weight: bold;">&lt;your_branch&gt;</span></div><div><br/></div><div>    <span style="color: rgb(146, 146, 146);"># Case 2: Real merging.</span></div><div><span style="color: rgb(146, 146, 146);">    # In this case some changes were made while you were working in your branch</span></div><div>     <en-media hash="9fb69d4dad36b487da679821c522b62a" type="image/png"/><br/></div><div>    <span style="color: rgb(146, 146, 146);"># First you need to make sure that the master branch is clean ( means there is no uncommited changes)</span></div><div>    =&gt; <span style="font-weight: bold;">git</span> <span style="font-weight: bold; color: rgb(0, 143, 0);">master</span></div><div>    =&gt;<span style="font-weight: bold;"> git</span><span style="color: rgb(255, 64, 255);"> status</span></div><div>    =&gt;<span style="font-weight: bold;"> git</span> <span style="color: rgb(255, 64, 255);">merge </span><span style="font-weight: bold; color: rgb(0, 150, 255);">&lt;your_branch&gt;</span></div><div><br/></div><ol start="9"><li><span style="color: rgb(4, 51, 255); font-weight: bold;">Remote Repository</span></li></ol><div><br/></div><div>    <b><u>Case I: Push the local repositroy to a remote server.</u></b></div><div><span style="color: rgb(146, 146, 146);">    # GitHub Account: </span><a style="color: rgb(146, 146, 146);" href="http://github.com">http://github.com</a></div><div><span style="color: rgb(146, 146, 146);">    # User = hasanovk, Password=OldBase, Repository=</span><a style="color: rgb(146, 146, 146);" href="https://github.com/hasanovk/cdi.git">https://github.com/hasanovk/cdi.git</a></div><div>    =&gt;<span style="font-weight: bold;"> git</span> <span style="color: rgb(255, 64, 255);">remote</span> <span style="color: rgb(0, 143, 0);">add</span> <span style="color: rgb(148, 17, 0);">origin </span><a href="https://github.com/hasanovk/cdi.git">https://github.com/hasanovk/cdi.git</a></div><div>    <span style="color: rgb(146, 146, 146);"># The above command will create the remote repository, called “origin” ( you giave any name you like)</span>    </div><div>    =&gt;<span style="font-weight: bold;"> git</span><span style="font-weight: bold; color: rgb(255, 64, 255);"> </span><span style="color: rgb(255, 64, 255);">remote</span></div><div>    <span style="color: rgb(146, 146, 146);">origin   </span></div><div>    =&gt;<span style="font-weight: bold;"> git</span><span style="color: rgb(255, 64, 255);"> remote</span> <span style="font-weight: bold;">-v</span></div><div>    <span style="color: rgb(146, 146, 146);">origin    https://github.com/hasanovk/cdi.git (fetch)</span></div><div><span style="color: rgb(146, 146, 146);">    </span><span style="color: rgb(146, 146, 146);">origin    https://github.com/hasanovk/cdi.git (push)</span></div><div>    <span style="color: rgb(146, 146, 146);"># To see where Git keeps the information about the remote repositry</span>:</div><div>    =&gt; <span style="font-weight: bold;">cat</span> <span style="color: rgb(148, 17, 0);">.git/</span><span style="color: rgb(4, 51, 255);">config</span></div><div>    <span style="color: rgb(146, 146, 146);">[core]</span></div><div><span style="color: rgb(146, 146, 146);">    repositoryformatversion = 0</span></div><div><span style="color: rgb(146, 146, 146);">    filemode = true</span></div><div><span style="color: rgb(146, 146, 146);">    bare = false</span></div><div><span style="color: rgb(146, 146, 146);">    logallrefupdates = true</span></div><div><span style="color: rgb(146, 146, 146);">    ignorecase = true</span></div><div><span style="color: rgb(146, 146, 146);">    precomposeunicode = true</span></div><div><span style="color: rgb(146, 146, 146);">    </span><span style="color: rgb(146, 146, 146);">[remote &quot;origin&quot;]</span></div><div><span style="color: rgb(146, 146, 146);">    url = https://github.com/hasanovk/cdi.git</span></div><div><span style="color: rgb(146, 146, 146);">    fetch = +refs/heads/*:refs/remotes/origin/*</span></div><div><span style="color: rgb(146, 146, 146);">    </span><span style="color: rgb(146, 146, 146);">[branch &quot;master&quot;]</span></div><div><span style="color: rgb(146, 146, 146);">    remote = origin</span></div><div><span style="color: rgb(146, 146, 146);">    merge = refs/heads/master </span></div><div><br/></div><div>    <font color="#929292"># To push the local </font><font color="#009051">master </font><font color="#929292">repository to the remote </font><font color="#0433ff">origin</font><font color="#929292"> :</font></div><div>    =&gt; <b>git</b> <font color="#ff40ff">push</font> -u <font color="#0433ff">origin</font> <font color="#009051">master</font></div><div>    <span style="color: rgb(146, 146, 146);"># To see the remote branches :</span></div><div>    =&gt; <span style="font-weight: bold;">git</span> <span style="color: rgb(255, 64, 255);">branch </span><span style="color: rgb(148, 17, 0);">-r</span></div><div>    <span style="color: rgb(146, 146, 146);"># To see all the branches:</span></div><div>    =&gt;<span style="font-weight: bold;"> git</span> <span style="color: rgb(255, 64, 255);">barnch</span> <span style="color: rgb(148, 17, 0);">-a</span></div><div><en-media hash="c7f7bb95de72a5e1e0e53a1f1239f985" type="image/png"/><br/></div><div>   <b><u> Case II : We want to download a copy of the remote repository. </u></b><font color="#929292"><br/></font></div><div><span><span><font color="#929292">    # If we don’t give a name , it will create the poject folder based on the project name ( i.e. “cdi”)</font></span><br/></span></div><div>    =&gt; <b>git</b> <font color="#ff40ff">clone</font> <a href="https://github.com/hasanovk/cdi.git">https://github.com/hasanovk/cdi.git</a></div><div><br/></div><div>    <font color="#929292"># We can give a project folder name instead of the default:</font></div><div>    =&gt; <b>git<font color="#ff40ff"> </font></b><font color="#ff40ff">clone</font> <a href="https://github.com/hasanovk/cdi.git">https://github.com/hasanovk/cdi.git</a>  <font color="#941100">myPoject</font></div><div>    <font color="#929292"># In this case the project will have a copy (clone) inside the “myProject” folder.</font></div><div><font color="#929292"><br/></font></div><div><font color="#929292"><br/></font></div><div>    <b><u>Case III : Some changes were made in the remote repository and our repositroy don’t have them.</u></b><br/></div><div><span>   <font color="#929292"> # In our local branch we have “origin/master” and ‘master” branches. These are two different branches.</font><font color="#929292"><br/></font></span></div><div><span><span><font color="#929292"><span>    # The “origin/master” is the copy of the remote one. Although it might be out off sync, as soon as we</span><br/></font></span></span></div><div><span><span><span><font color="#929292"><span>    # we do “fetch” it will be same as the remote repositroy. On the other hand, we can keep modifying our</span><br/></font></span></span></span></div><div><span><span><span><span><font color="#929292"><span>    # local master branch and it has no effect to the remote repository ( or local “origin/master”) unless</span><br/></font></span></span></span></span></div><div><span><span><span><span><span><font color="#929292"><span>    # we push the changes.</span><br/></font></span></span></span></span></span></div><div><span><span><span><span><span><span><span><font color="#929292">    # To sync with the remote repository:</font></span><br/></span></span></span></span></span></span></div><div><span><span><span><span><span><span>    =&gt; <b>git</b><font color="#ff40ff"> fetch</font><font color="#0433ff"> origin</font><br/></span></span></span></span></span></span></div><div><en-media hash="b84e876f2c0e8a42707b16c7007d4205" type="image/png"/><br/></div><div>    <font color="#929292"># The above command wiil sync our local “origin/master” with the remote server. However, the local</font><font color="#929292"><br/></font></div><div><span><font color="#929292"><span>    # master branch needs also update by usning the “merge” command.</span><br/></font></span></div><div><span><span><span><font color="#929292">    # While in the master branch do:</font></span><br/></span></span></div><div><span>    =&gt; <b>git</b><font color="#ff40ff"> merge</font> <font color="#0433ff">origin/master </font><br/></span></div><div><br/></div><div>     <font color="#929292"># Basic rules:</font></div><div><span><font color="#929292">    #  Always “fetch” first</font></span><br/></div><div><br/></div><div><br/></div><div>——————————————————— End of the Tutorial -----------------------------</div><div><br/></div><div><span style="font-weight: bold;"><font style="font-size: 24px;">Setting Up A Remote Repository in UNIX</font></span></div><div><br/></div><div>a)<span style="font-weight: bold;"> Using SSH access</span>:</div><div>Step 1.</div><div> Create a remote project folder and initiate an empty Git repository:</div><div>=&gt; <span style="font-weight: bold;">mkdir </span>/home/khasanov/codes/php</div><div>=&gt; <span style="font-weight: bold;">git </span>init --bare</div><div># &quot;--bare&quot; means create an empty repository or</div><div># it  will not have a working tree attached to it.</div><div><br/></div><div>Step 2.</div><div> Setup Auto Login using the SSH Public Key# Remote Server side:</div><div>=&gt; <span style="font-weight: bold;">mkdir </span>/home/khasanov/.ssh <span style="font-weight: bold;">&amp;&amp;</span> <span style="font-weight: bold;">cd</span> &amp;&amp; <span style="font-weight: bold;">chmod 0700</span>  .ssh</div><div>=&gt;<span style="font-weight: bold;"> touch </span>/home/khasanov/.ssh/authorized_keys<br/></div><div>=&gt; <span style="font-weight: bold;">chmod 600 </span>/home/khasanov/.ssh/ authorized_keys</div><div><br/></div><div># Make sure that <span style="font-weight: bold;">PubkeyAuthentication</span> <span style="font-style: italic;">yes </span></div><div># and <span style="font-weight: bold;">RSAAuthentication</span> yes in the &quot;<span style="font-weight: bold;">/etc/ssh/sshd_config</span>&quot; file</div><div><span style="font-style: italic;">#</span> Client side :</div><div># Generating the <span style="font-weight: bold;">public</span> - <span style="font-weight: bold;">private key</span> pair:</div><div># You can use RSA or DSA key (SSH v2 ) to generate</div><div>=&gt;<span style="font-weight: bold;"> ssh-keygen -t dsa -b 1024 </span>   <br/></div><div> #  &quot;t&quot; - type, &quot;b&quot; - bits # This will create &quot;id_dsa&quot; and &quot;id_dsa.pub&quot;</div><div># You need to copy the contents of the  &quot;id_dsa.pub&quot; file and</div><div># append to the &quot;authorized_keys&quot; file on the remote Server.</div><div><br/></div><div>=&gt; <span style="font-weight: bold;">ssh</span> <a href="mailto:khasanov@karshi.ca">khasanov@karshi.ca</a> <span style="font-weight: bold;">cat</span> <span style="font-weight: bold;">&lt; </span>id_rsa.pub &quot;<span style="font-weight: bold;">|</span>&quot; <span style="font-weight: bold;">dd of</span>=<span style="font-style: italic;">/home/khasanov/</span>.ssh/authorized_keys</div><div><br/></div><div><br/></div><div><br/></div><div><span style="font-weight: bold;">Real World Example:</span></div><div><br/></div><div><span style="font-weight: bold;">Example 1</span>: We want to get the source code of the GitHub project, called “fancy box”.</div><div>                   The project is located at </div><div><a href="https://github.com/fancyapps/">https://github.com/fancyapps/</a>fancyBox</div><div><br/></div><div>                   </div><div><br/></div><div><en-media hash="f0bf0c59d7a78bbd287a16fefdd0f60f" type="image/png"/><br/></div><div>      </div><div>                   Click on the “Clone or Download “: You can copy the link </div><div>                   </div><div><a href="https://github.com/fancyapps/fancybox.git">https://github.com/fancyapps/fancybox.git</a></div><div><br/></div><div>                   =&gt; <span style="font-weight: bold;">git </span>clone <a href="https://github.com/fancyapps/">https://github.com/fancyapps/</a>fancybox.git</div><div><br/></div><div>                   ( this will create a folder called “fancybox”)</div><div>                  =&gt; <span style="font-weight: bold;">cd </span>fancybox</div><div><br/></div><div>                  =&gt; <span style="font-weight: bold;">git </span>pull<span style="font-weight: bold;"> origin</span></div><div>  ( this will retrieve  updates if there any)</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div></en-note>
