<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div>The Node.js Core Framework: ExpressJS</div><div><span style="color: rgb(146, 146, 146);">#: Written by KFH: </span><a href="mailto:karshi.hasanov@utoronto.ca">karshi.hasanov@utoronto.ca</a></div><div><span style="color: rgb(146, 146, 146);">#: Date: April 20, 2018</span></div><div><span style="color: rgb(146, 146, 146);">#: Description: The ExpressJS Framework Installation</span></div><div><span style="color: rgb(146, 146, 146);">#: Last Modified: April 30, 2018</span></div><div><br /></div><div><font color="#212121" style="font-size: 24px;"><span style="font-size: 24px; color: rgb(33, 33, 33); font-weight: bold;">Contacts Project</span></font></div><div><br /></div><div><font color="#212121" style="font-size: 18px;"><span style="font-size: 18px; color: rgb(33, 33, 33); font-weight: bold;">Setting Up the Project</span></font></div><div><br /></div><div><span style="color: rgb(33, 33, 33);">=&gt; </span><span style="color: rgb(33, 33, 33); font-weight: bold;">mkdir</span><span style="color: rgb(33, 33, 33);"> </span><span style="color: rgb(148, 17, 0);">Contacts</span></div><div><span style="color: rgb(33, 33, 33);">=&gt;</span><span style="color: rgb(33, 33, 33); font-weight: bold;"> cd</span><span style="color: rgb(33, 33, 33);"> </span><span style="color: rgb(148, 17, 0);">Contacts</span></div><div><span style="color: rgb(33, 33, 33);"># Create a package.json file</span></div><div><span style="color: rgb(33, 33, 33);">=&gt;</span><span style="font-weight: bold;"> </span><span style="color: rgb(148, 55, 255); font-weight: bold;">npm</span><span style="color: rgb(33, 33, 33); font-weight: bold;"> </span><span style="color: rgb(0, 143, 0); font-weight: bold;">init</span></div><div><br /></div><div>=&gt; <span style="color: rgb(148, 55, 255);">npm</span> <span style="color: rgb(0, 143, 0);">install </span><span style="color: rgb(0, 150, 255);">express</span> --<span style="font-weight: bold;">save</span></div><div>=&gt;<span style="color: rgb(148, 55, 255);"> npm </span><span style="color: rgb(0, 143, 0);">install </span><span style="color: rgb(0, 145, 147);">body-parser</span> --<span style="font-weight: bold;">save</span></div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># Install and get the dependencies:</span></div><div>=&gt; <span style="color: rgb(148, 55, 255);">npm</span> <span style="color: rgb(0, 143, 0);">install </span></div><div><span style="color: rgb(146, 146, 146);"># Install the “nodemon” tool:</span></div><div>=&gt;<span style="color: rgb(255, 47, 146);"> sudo </span><span style="color: rgb(148, 55, 255);">npm</span> <span style="color: rgb(0, 144, 81);">install </span><span style="color: rgb(255, 47, 146); font-weight: bold;">-g</span><span style="font-weight: bold;"> </span><span style="color: rgb(4, 51, 255);">nodemon</span></div><div><br /></div><div><hr /><div>/<span style="color: rgb(146, 146, 146);">/ The “app.js” file</span></div></div><div><span style="color: rgb(146, 144, 0);">var</span> <span style="color: rgb(0, 150, 255);">express </span>= <span style="color: rgb(255, 147, 0);">require</span>('<span style="color: rgb(0, 150, 255);">express</span>');</div><div><span style="color: rgb(146, 144, 0);">var</span><span style="color: rgb(148, 17, 0);"> </span><span style="color: rgb(0, 145, 147);">bodyParser </span>=<span style="color: rgb(255, 147, 0);"> require</span>('<span style="color: rgb(0, 145, 147);">body-parser</span>');</div><div><span style="color: rgb(146, 144, 0);">var</span><span style="color: rgb(148, 82, 0);"> path</span> =<span style="color: rgb(255, 147, 0);"> require</span>('<span style="color: rgb(148, 82, 0);">path</span>’); <span style="color: rgb(146, 146, 146);">// We don’t have to install the “path"</span></div><div><br /></div><div><span style="color: rgb(146, 144, 0);">var </span><span style="font-weight: bold;">app</span> = <span style="color: rgb(255, 147, 0);">express</span>();</div><div><br /></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(255, 147, 0);">listen</span>(<span style="color: rgb(0, 145, 147);">1968</span>, <span style="color: rgb(4, 51, 255);">function()</span>{</div><div>   <span style="color: rgb(148, 33, 147);"> console.log</span>('<span style="color: rgb(146, 146, 146);">Server started on Port 1968 ....</span>');</div><div>})</div><div><hr /><div># You could have use “=&gt; node app.js”</div></div><div># To start the server:</div><div>=&gt; <span style="color: rgb(79, 143, 0);">nodemon </span></div><div># Visit <a href="http://localhost:1968">http://localhost:1968</a> and you will get :</div><div>"Cannot GET /“ since we don’t have the routing setup yet</div><div># Lets add the route:</div><div><hr /></div><div>/<span style="color: rgb(146, 146, 146);">/ The “app.js” file</span></div><div><span style="color: rgb(146, 144, 0);">var</span> <span style="color: rgb(0, 150, 255);">express</span> = <span style="color: rgb(255, 147, 0);">require</span>('<span style="color: rgb(0, 150, 255);">express</span>');</div><div><span style="color: rgb(146, 144, 0);">var</span> <span style="color: rgb(0, 145, 147);">bodyParser</span> =<span style="color: rgb(255, 147, 0);"> require</span>('<span style="color: rgb(0, 145, 147);">body-parser</span>');</div><div><span style="color: rgb(146, 144, 0);">var </span><span style="color: rgb(148, 17, 0);">path </span>=<span style="color: rgb(255, 147, 0);"> require</span>('path');</div><div><br /></div><div><span style="color: rgb(146, 144, 0);">var </span><span style="font-weight: bold;">app</span> = <span style="color: rgb(255, 147, 0);">express</span>();</div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">get</span>(‘<span style="color: rgb(148, 17, 0);">/</span>‘,<span style="color: rgb(4, 51, 255);"> function</span>(<span style="color: rgb(148, 82, 0);">req</span>, <span style="color: rgb(79, 143, 0);">res</span>) {</div><div>            <span style="color: rgb(79, 143, 0);">res</span>.<span style="color: rgb(148, 55, 255);">send</span>('<span style="color: rgb(146, 146, 146);">The KFH-Contacts View..'</span>);</div><div>});</div><div><br /></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(255, 147, 0);">listen</span>(<span style="color: rgb(0, 145, 147);">1968</span>, <span style="color: rgb(4, 51, 255);">function()</span>{</div><div>   <span style="color: rgb(148, 33, 147);"> console.log</span>('<span style="color: rgb(146, 146, 146);">Server started on Port 1968 ....</span>');</div><div>})</div><div><hr /></div><div><br /></div><div><span style="font-size: 18px; font-weight: bold;">Middleware Function</span></div><div># Before we go further, we want to talk about the middleware function used in the Express. <span style="font-style: italic;">Middleware</span> functions are functions that have access to the <a href="http://expressjs.com/en/4x/api.html#req">request object</a> (req), the <a href="http://expressjs.com/en/4x/api.html#res">response object</a> (res), and the next middleware function in the application’s request-response cycle. It always watches for the “req” and “res” call.</div><div><br /></div><div>Here is the simple example how to define and use a middleware function:</div><div><span style="color: rgb(146, 146, 146);"># Define the object. </span></div><div><span style="color: rgb(146, 144, 0);">var</span><span style="font-weight: bold;"> logger</span> =<span style="color: rgb(4, 51, 255);"> function</span>(<span style="color: rgb(148, 17, 0);">req</span>, <span style="color: rgb(0, 143, 0);">res</span>, <span style="font-weight: bold;">next</span>) {</div><div>        <span style="color: rgb(148, 55, 255);">console.log</span>(‘<span style="color: rgb(146, 146, 146);">Logging the process…</span>’);</div><div>        <span style="font-weight: bold;">next()</span>;</div><div>}</div><div><span style="color: rgb(146, 146, 146);"># Whenever “req” or “res” called this function will trigger . The “next()” function</span></div><div><span style="color: rgb(146, 146, 146);"># means pass the action to next process.</span></div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># To use this function, we to call the “use” method of the “app”</span></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 150, 255);">use</span>(<span style="font-weight: bold;">logger</span>);</div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># Remember: This function must come before any “res” call made ! Otherwise, it</span></div><div><span style="color: rgb(146, 146, 146);"># will not trigger.</span></div><div><hr /><div># Now lets add the “bodyParser” Middleware to parse the JSON files</div></div><div><br /></div><div>/<span style="color: rgb(146, 146, 146);">/ The “app.js” file</span></div><div><span style="color: rgb(146, 144, 0);">var</span> <span style="color: rgb(0, 150, 255);">express</span> = <span style="color: rgb(255, 147, 0);">require</span>('<span style="color: rgb(0, 150, 255);">express</span>');</div><div><span style="color: rgb(146, 144, 0);">var</span> <span style="color: rgb(0, 145, 147);">bodyParser</span> =<span style="color: rgb(255, 147, 0);"> require</span>('<span style="color: rgb(0, 145, 147);">body-parser</span>');</div><div><span style="color: rgb(146, 144, 0);">var </span><span style="color: rgb(148, 17, 0);">path </span>=<span style="color: rgb(255, 147, 0);"> require</span>('path');</div><div><br /></div><div><span style="color: rgb(146, 144, 0);">var </span><span style="font-weight: bold;">app</span> = <span style="color: rgb(255, 147, 0);">express</span>();</div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">get</span>(‘<span style="color: rgb(148, 17, 0);">/</span>‘,<span style="color: rgb(4, 51, 255);"> function</span>(<span style="color: rgb(148, 82, 0);">req</span>, <span style="color: rgb(79, 143, 0);">res</span>) {</div><div>            <span style="color: rgb(79, 143, 0);">res</span>.<span style="color: rgb(148, 55, 255);">send</span>('<span style="color: rgb(146, 146, 146);">The KFH-Contacts View..'</span>);</div><div>});</div><div><br /></div><div><span style="color: rgb(146, 146, 146);">// Body Parser Middleware</span></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">use</span>(<span style="color: rgb(0, 145, 147);">bodyParser</span>.<span style="color: rgb(1, 25, 147);">json()</span>);</div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">use</span>(<span style="color: rgb(0, 145, 147);">bodyParser.</span><span style="color: rgb(1, 25, 147);">urlencoded</span>({<span style="color: rgb(146, 144, 0);">extended</span>: <span style="color: rgb(255, 47, 146);">false</span>}));</div><div><br /></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(255, 147, 0);">listen</span>(<span style="color: rgb(0, 145, 147);">1968</span>, <span style="color: rgb(4, 51, 255);">function()</span>{</div><div>   <span style="color: rgb(148, 33, 147);"> console.log</span>('<span style="color: rgb(146, 146, 146);">Server started on Port 1968 ....</span>');</div><div>})</div><div><hr /><div><span style="font-size: 18px; font-weight: bold;">Static Files and How Use Them in Express</span></div></div><div><span style="color: rgb(146, 146, 146);"># It is very important to understand how the Express handles the folders where</span></div><div><span style="color: rgb(146, 146, 146);"># we usually want to keep our CSS, JS and Image files.</span></div><div><span style="color: rgb(146, 146, 146);"># If the Express see the  “index.html” </span><span style="color: rgb(146, 146, 146);">inside the “public” folder, </span></div><div><span style="color: rgb(146, 146, 146);"># it will ignore “app.js” and will read the </span><span style="color: rgb(146, 146, 146);">“index.html” first.</span></div><div>=&gt; <span style="font-weight: bold;">mkdir</span><span style="color: rgb(148, 17, 0);"> Contacts</span>/<span style="color: rgb(146, 144, 0);">public</span></div><div>=&gt; <span style="font-weight: bold;">touch</span> <span style="color: rgb(148, 82, 0);">Contact</span>/<span style="color: rgb(146, 144, 0);">public</span>/<span style="color: rgb(0, 84, 147);">index.html</span></div><div><span style="color: rgb(146, 146, 146);"># Edit the index.html” and put some text</span></div><div>…</div><div><span style="color: rgb(146, 146, 146);">// Body Parser Middleware</span></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">use</span>(<span style="color: rgb(0, 145, 147);">bodyParser</span>.<span style="color: rgb(1, 25, 147);">json()</span>);</div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">use</span>(<span style="color: rgb(0, 145, 147);">bodyParser.</span><span style="color: rgb(1, 25, 147);">urlencoded</span>({<span style="color: rgb(146, 144, 0);">extended</span>: <span style="color: rgb(255, 47, 146);">false</span>}));</div><div><br /></div><div><span style="color: rgb(146, 146, 146);">// Setting Up The Static PATH : </span></div><div><font color="#929292">// The “path.join” concatinate the project root path + “/public”</font></div><div><font color="#929292">// Now any file or folder under “public” will be seen as the part of the root folder</font></div><div><font color="#929000">var</font><span style="color: rgb(146, 146, 146);">  </span><font style="color: rgb(148, 17, 0);">statPath </font><span style="color: rgb(146, 146, 146);">=</span><font color="#424242"> <span style="font-weight: bold;">path.join</span></font><span style="color: rgb(146, 146, 146);">(</span><span style="color: rgb(148, 17, 0);">__dirname,</span><span style="color: rgb(146, 146, 146);"> '</span><span style="color: rgb(146, 144, 0);">public</span><font color="#929292">’)</font></div><div><span style="color: rgb(146, 146, 146);"><br /></span></div><div><font color="#929292">// If you don’t specify a “/path_name” as a first agrument, the default is “/"</font></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">use</span>(<span style="color: rgb(0, 150, 255);">express</span>.<span style="color: rgb(0, 84, 147);">static</span>(<span style="color: #941100;">statPath</span>));</div><div><span style="color: rgb(146, 146, 146);">// Note: The folder “public” will not show up in the web address, but all other folders must</span></div><div><span style="color: rgb(146, 146, 146);">// be inside of this folder. </span></div><div><span style="color: rgb(146, 146, 146);">( Physical Location in OS)           ( Virtual Location on the Site)</span></div><div><font style="color: rgb(255, 64, 255);">/projectRoot</font><span style="color: rgb(146, 144, 0);">/public</span>/<font color="#941100">css</font><span style="color: rgb(148, 17, 0);">/</span>style.css  <span style="color: rgb(148, 17, 0);">  </span>          —&gt; <span style="color: rgb(4, 51, 255);"><a href="http://localhost">http://localhost</a>:</span><span style="color: rgb(0, 145, 147);">1968</span>/<span style="font-weight: bold;">css</span>/style.css </div><div><span style="color: rgb(146, 144, 0);"><span style="color: #ff40ff;">/projectRoot/</span>public/</span><font color="#941100">js</font><span style="color: rgb(148, 17, 0);">/</span>controller.js<font color="#941100">     </font>        —&gt; <span style="color: rgb(4, 51, 255);"><a href="http://localhost">http://localhost</a>:</span><span style="color: rgb(0, 145, 147);">1968</span>/<span style="font-weight: bold;">js</span>/controller.js</div><div><span style="color: rgb(146, 144, 0);"><span style="color: #ff40ff;">/projectRoot/</span>public</span>/<font color="#941100">images/</font>favicon.png    —&gt; <span style="color: rgb(4, 51, 255);"><a href="http://localhost">http://localhost</a>:</span><span style="color: rgb(0, 145, 147);">1968</span>/<span style="font-weight: bold;">images</span>/favicon.png</div><div><br /></div><div>// If you specify the path, it will act like an “alias”. You can name it whatever name you like.</div><div><span style="font-weight: bold;">// app</span>.<span style="color: rgb(0, 84, 147);">use</span>(“<font style="color: rgb(148, 55, 255);">/path_name</font>”, <span style="color: rgb(0, 150, 255);">express</span>.<span style="color: rgb(0, 84, 147);">static</span>(<span style="color: #941100;">statPath</span>));</div><div><span style="color: rgb(146, 144, 0);">// <span style="color: #ff40ff;">/projectRoot/</span>public</span>/<span style="color: rgb(148, 17, 0);">css    </span>     —&gt; <a href="http://localhost" style="color: rgb(4, 51, 255);">http://localhost</a><span style="color: rgb(4, 51, 255);">:</span><span style="color: rgb(0, 145, 147);">1968<span style="color: #9437ff;">/path_name</span></span>/<span style="font-weight: bold;">css</span>/style.css </div><div><span style="color: rgb(146, 144, 0);">// <span style="color: #ff40ff;">/projectRoot/</span>public/</span><span style="color: rgb(148, 17, 0);">js     </span>       —&gt; <a href="http://localhost" style="color: rgb(4, 51, 255);">http://localhost</a><span style="color: rgb(4, 51, 255);">:</span><span style="color: rgb(0, 145, 147);">1968<span style="color: #9437ff;">/path_name</span></span>/<span style="font-weight: bold;">js</span>/controller.js</div><div><span style="color: rgb(146, 144, 0);">// <span style="color: #ff40ff;">/projectRoot/</span>public</span>/<span style="color: rgb(148, 17, 0);">images</span>   —&gt; <a href="http://localhost" style="color: rgb(4, 51, 255);">http://localhost</a><span style="color: rgb(4, 51, 255);">:</span><span style="color: rgb(0, 145, 147);">1968<span style="color: #9437ff;">/path_name</span></span>/<span style="font-weight: bold;">images</span>/favicon.png</div><div><br /></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(255, 147, 0);">listen</span>(<span style="color: rgb(0, 145, 147);">1968</span>, <span style="color: rgb(4, 51, 255);">function()</span>{</div><div>   <span style="color: rgb(148, 33, 147);"> console.log</span>('<span style="color: rgb(146, 146, 146);">Server started on Port 1968 ....</span>');</div><div>})</div><div><br /></div><div><br /></div><div><br /></div><div><en-media hash="bee351ca26e7b69d46f633a0ca6e310b" type="image/png" /><br /></div><div><br /></div><div><br /></div><div><hr /></div><div><br /></div><div><span style="font-size: 18px; font-weight: bold;">Parsing the JSON Files</span></div><div># Instead of responding with a message , we are going to print the a JSON file</div><div>/<span style="color: rgb(146, 146, 146);">/ The “app.js” file</span></div><div><span style="color: rgb(146, 144, 0);">var</span> <span style="color: rgb(0, 150, 255);">express</span> = <span style="color: rgb(255, 147, 0);">require</span>('<span style="color: rgb(0, 150, 255);">express</span>');</div><div><span style="color: rgb(146, 144, 0);">var</span> <span style="color: rgb(0, 145, 147);">bodyParser</span> =<span style="color: rgb(255, 147, 0);"> require</span>('<span style="color: rgb(0, 145, 147);">body-parser</span>');</div><div><span style="color: rgb(146, 144, 0);">var </span><span style="color: rgb(148, 17, 0);">path </span>=<span style="color: rgb(255, 147, 0);"> require</span>('path');</div><div><br /></div><div><span style="color: rgb(146, 144, 0);">var </span><span style="font-weight: bold;">app</span> = <span style="color: rgb(255, 147, 0);">express</span>();</div><div><br /></div><div><span style="color: rgb(146, 146, 146);">// Body Parser Middleware</span></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">use</span>(<span style="color: rgb(0, 145, 147);">bodyParser</span>.<span style="color: rgb(1, 25, 147);">json()</span>);</div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">use</span>(<span style="color: rgb(0, 145, 147);">bodyParser.</span><span style="color: rgb(1, 25, 147);">urlencoded</span>({<span style="color: rgb(146, 144, 0);">extended</span>: <span style="color: rgb(255, 47, 146);">false</span>}));</div><div><br /></div><div><span style="color: rgb(146, 146, 146);">// Static Path To find files:</span></div><div>app.use(express.static(path.join(__dirname, 'public')));</div><div><br /></div><div><span style="color: rgb(146, 146, 146);">// Open the JSON File</span></div><div>var fs = require('fs');</div><div>var data = fs.readFileSync('public/json/KFH_Contacts.json');</div><div>var contacts = JSON.parse(data);</div><div><br /></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">get</span>(‘<span style="color: rgb(148, 17, 0);">/</span>‘,<span style="color: rgb(4, 51, 255);"> function</span>(<span style="color: rgb(148, 82, 0);">req</span>, <span style="color: rgb(79, 143, 0);">res</span>) {</div><div>            <span style="color: rgb(79, 143, 0);">res</span>.<span style="color: rgb(148, 55, 255);">send</span>('<span style="color: rgb(146, 146, 146);">The KFH-Contacts View..'</span>);</div><div>});</div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(255, 147, 0);">listen</span>(<span style="color: rgb(0, 145, 147);">1968</span>, <span style="color: rgb(4, 51, 255);">function()</span>{</div><div>   <span style="color: rgb(148, 33, 147);"> console.log</span>('<span style="color: rgb(146, 146, 146);">Server started on Port 1968 ....</span>');</div><div>})</div><div><hr /><div><span style="font-weight: bold; font-size: 24px;">Template: Ninja (Nunjucks)</span></div></div><div># <a href="http://mozilla.github.io/nunjucks/getting-started.html">http://mozilla.github.io/nunjucks/getting-started.html</a></div><div>=&gt;<span style="color: rgb(148, 55, 255);"> npm</span> <span style="color: rgb(79, 143, 0);">install </span><span style="color: rgb(255, 64, 255);">nunjucks</span> <span style="font-weight: bold;">--save</span></div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># Create the folder called “views” under the “Contacts</span></div><div>=&gt; <span style="font-weight: bold;">mkdir</span> <span style="color: rgb(148, 17, 0);">Contacts/views</span></div><div><span style="color: rgb(146, 146, 146);"># Create an HTML file with extension “jinja” and put under “views”</span></div><div>=&gt;<span style="font-weight: bold;"> touch</span><span style="color: rgb(148, 17, 0);"> Contacts/views/</span><span style="color: rgb(255, 64, 255);">index</span>.<span style="color: rgb(148, 23, 81);">jinja</span></div><div>( you  can have any extention name you like, but I choose “jinja”)</div><div><hr /></div><div><br /></div><div>/<span style="color: rgb(146, 146, 146);">/ The “app.js” file</span></div><div><span style="color: rgb(146, 144, 0);">var</span> <span style="color: rgb(0, 150, 255);">express</span> = <span style="color: rgb(255, 147, 0);">require</span>('<span style="color: rgb(0, 150, 255);">express</span>');</div><div><span style="color: rgb(146, 144, 0);">var</span> <span style="color: rgb(0, 145, 147);">bodyParser</span> =<span style="color: rgb(255, 147, 0);"> require</span>('<span style="color: rgb(0, 145, 147);">body-parser</span>');</div><div><span style="color: rgb(146, 144, 0);">var </span><span style="color: rgb(148, 17, 0);">path </span>=<span style="color: rgb(255, 147, 0);"> require</span>('<span style="color: rgb(148, 17, 0);">path</span>’);</div><div><span style="color: rgb(146, 144, 0);">var</span> <span style="font-weight: bold;">fs</span> = <span style="color: rgb(255, 147, 0);">require</span>('<span style="font-weight: bold;">fs</span>')</div><div><span style="color: rgb(146, 144, 0);">var </span><span style="color: rgb(255, 64, 255);">Ninja</span> = <span style="color: rgb(255, 147, 0);">require</span>('<span style="color: rgb(255, 64, 255);">nunjucks</span>’);</div><div><br /></div><div><span style="color: rgb(146, 144, 0);">var </span><span style="font-weight: bold;">app</span> = <span style="color: rgb(255, 147, 0);">express</span>();</div><div><br /></div><div><span style="color: rgb(146, 146, 146);">// The Template: Ninja ( Nunjucks)</span></div><div><span style="color: rgb(255, 64, 255);">Ninja</span>.<span style="color: rgb(0, 84, 147);">configure</span>('<span style="color: rgb(148, 82, 0);">views</span>', {</div><div>    <span style="font-weight: bold;">autoescape</span>: <span style="color: rgb(0, 143, 0);">true</span>,</div><div>    <span style="color: rgb(0, 150, 255);">express</span>:<span style="font-weight: bold;"> app</span></div><div>});</div><div><span style="color: rgb(146, 146, 146);">// Set the file extension for Ninja 650:</span></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">set</span>('<span style="color: rgb(146, 144, 0);">view engine</span>', '<span style="color: rgb(148, 33, 147);">jinja</span>');</div><div><span style="color: rgb(146, 146, 146);">// The PATH to Views folder</span></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">set</span>('<span style="color: rgb(148, 17, 0);">views</span>', <span style="font-weight: bold;">path.join</span>(<span style="color: rgb(148, 17, 0);">__dirname</span>, '<span style="color: rgb(146, 144, 0);">views</span>'));</div><div><br /></div><div><span style="color: rgb(146, 146, 146);">// Body Parser Middleware</span></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">use</span>(<span style="color: rgb(0, 145, 147);">bodyParser</span>.<span style="color: rgb(1, 25, 147);">json()</span>);</div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">use</span>(<span style="color: rgb(0, 145, 147);">bodyParser.</span><span style="color: rgb(1, 25, 147);">urlencoded</span>({<span style="color: rgb(146, 144, 0);">extended</span>: <span style="color: rgb(255, 47, 146);">false</span>}));</div><div><br /></div><div><span style="color: rgb(146, 146, 146);">// Static Path To find files in the root folder:</span></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">use</span>(<span style="color: rgb(0, 150, 255);">express</span>.<span style="color: rgb(4, 51, 255);">static</span>(<span style="font-weight: bold;">path.join</span>(<span style="color: rgb(148, 17, 0);">__dirname</span>, '<span style="color: rgb(146, 144, 0);">public</span>')));</div><div><br /></div><div><span style="color: rgb(146, 146, 146);">// Open the JSON File</span></div><div><span style="color: rgb(146, 146, 146);">// var data = fs.readFileSync('public/json/KFH_Contacts.json');</span></div><div><span style="color: rgb(146, 146, 146);">// var contacts = JSON.parse(data);</span></div><div><br /></div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(0, 84, 147);">get</span>(‘<span style="color: rgb(148, 17, 0);">/</span>‘,<span style="color: rgb(4, 51, 255);"> function</span>(<span style="color: rgb(148, 82, 0);">request</span>, <span style="color: rgb(79, 143, 0);">respond</span>) {</div><div>           <span style="color: rgb(146, 146, 146);"> //res.send('The KFH-Contacts View..’);</span></div><div>             <span style="color: rgb(79, 143, 0);">respond</span>.<span style="color: rgb(148, 55, 255);">render</span>(‘<span style="color: rgb(255, 64, 255);">index.jinja</span><span style="color: rgb(146, 146, 146);">'</span>);</div><div>});</div><div><span style="font-weight: bold;">app</span>.<span style="color: rgb(255, 147, 0);">listen</span>(<span style="color: rgb(0, 145, 147);">1968</span>, <span style="color: rgb(4, 51, 255);">function()</span>{</div><div>   <span style="color: rgb(148, 33, 147);"> console.log</span>('<span style="color: rgb(146, 146, 146);">Server started on Port 1968 ....</span>');</div><div>})</div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div></en-note>