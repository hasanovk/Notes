<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div>SQLite Introduction</div><div>#: Written by KFH: <a href="mailto:karshi.hasanov@utoronto.ca">karshi.hasanov@utoronto.ca</a></div><div>#: Date: Dec. 2, 2017</div><div>#: Description: The SQLite Database Tutorials</div><div>#: Last Modified:</div><div><br /></div><div><span style="font-size: 24px; font-weight: bold;">Installation and Example DB</span></div><div>Step 1. Download the SQLite and example DB form here:</div><div>            <a href="https://www.sqlite.org/download.html">https://www.sqlite.org/download.html</a></div><div>            <a href="http://www.sqlitetutorial.net/sqlite-sample-database/">http://www.sqlitetutorial.net/sqlite-sample-database/</a></div><div>            Note: You might already installed in your system </div><div>            =&gt; which sqlite3</div><div>            /opt/local/bin/sqlite3</div><div>            ( I don’t know how it got installed )</div><div><br /></div><div>Step 2. Extract the "<span style="font-weight: bold;">sqlite-tools-osx-x86-3210000.zip</span>” (for Mac OS X )</div><div>Step 3. Extract the samle database, called “ <span style="font-weight: bold;">chinook.zip</span>” —&gt; <span style="color: rgb(148, 17, 0);">chinook.db</span></div><div><br /></div><div><span style="font-size: 24px; font-weight: bold;">The Tutorial Using the Sample Database:</span></div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># I have created the folder “</span><span style="color: rgb(146, 146, 146);">/Users/khasanov/Projects/DB-Dev/SQLite</span><span style="color: rgb(146, 146, 146);">” and put the example database there</span></div><div><span style="font-size: 24px; font-weight: bold;">How To Connect to A Database</span></div><div><span style="color: rgb(146, 146, 146);"># There are two ways you can connect a database:</span></div><div><span style="color: rgb(146, 146, 146);"># Method 1</span></div><div>=&gt; <span style="font-weight: bold;">sqlite3</span> <span style="color: rgb(148, 17, 0);">&lt;DB name&gt; </span> </div><div>=&gt;<span style="font-weight: bold;"> sqlite3</span><span style="color: rgb(148, 17, 0); font-weight: bold;"> KFH_Library</span><span style="color: rgb(148, 17, 0);">.db</span></div><div><span style="color: rgb(146, 146, 146);"># Note: If you give a database which is not exit, it will create one with the name .</span></div><div><span style="color: rgb(146, 146, 146);"># Also, if you are note in the same folder you have to specify the full path to a database</span></div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># Method 2</span></div><div>=&gt;<span style="font-weight: bold;"> sqlite3</span></div><div><span style="font-weight: bold;">sqlite&gt;</span> <span style="color: rgb(0, 145, 147);">.open</span> <span style="color: rgb(148, 17, 0);">&lt;DB name&gt;</span></div><div><span style="font-weight: bold;">sqlite&gt;</span> <span style="color: rgb(0, 145, 147);">.open</span> <span style="color: rgb(148, 17, 0);">KFH_Library</span><span style="color: rgb(148, 17, 0);">.db </span>  </div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># To show databases in the current connection:</span></div><div><span style="color: rgb(146, 146, 146);"># “main” - means the current database</span></div><div><span style="font-weight: bold;">sqlite&gt;</span><span style="color: rgb(0, 145, 147); font-weight: bold;"> .databases</span></div><div><span style="color: rgb(146, 144, 0);">main: <span style="color: rgb(146, 144, 0);">/Users/khasanov/Projects/DB-Dev/SQLite/kfh/KFH_Library.db</span></span></div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># To attach an other database to the current one:</span></div><div><span style="font-weight: bold;">sqlite&gt;</span> <span style="color: rgb(148, 55, 255);">ATTACH DATABASE</span> “<span style="color: rgb(148, 17, 0);">kfh.db</span>” <span style="color: rgb(148, 55, 255);">AS</span> <span style="color: rgb(148, 17, 0);">kfh</span>;</div><div><span style="font-weight: bold;">sqlite&gt;</span> <span style="color: rgb(0, 145, 147); font-weight: bold;">.databases</span></div><div><span style="color: rgb(146, 144, 0);">main: </span><span style="color: rgb(146, 144, 0);">/Users/khasanov/Projects/DB-Dev/SQLite/kfh/KFH_Library.db</span></div><div><span style="color: rgb(146, 144, 0);">kfh:</span><span style="color: rgb(146, 144, 0);"> </span><span style="color: rgb(146, 144, 0);">/Users/khasanov/Projects/DB-Dev/SQLite/kfh</span><span style="color: rgb(146, 144, 0);">/kfh.db</span></div><div><br /></div><div><span style="font-weight: bold; font-size: 24px;">Create a Table in the SQLite Database</span></div><div><br /></div><div># Instead of creating a Table inside the sqlite command, we use an external file </div><div># “createTableBook.txt”  file with the following context:</div><div>CREATE TABLE book (</div><div>            BookID<span style="mso-spacerun: yes;">   integer PRIMARY KEY,                   </span></div><div><span style="mso-spacerun: yes;">   </span>         Title<span style="mso-spacerun: yes;">        text NOT NULL.</span></div><div>            Authors  text NOT NULL,              </div><div>            Subject  text NOT NULL,</div><div>            Category text NOT NULL,</div><div>            Branch text NOT NULL,</div><div>            Language text NOT NULL,</div><div>            Edition  integer NOT NULL,               </div><div><span style="mso-spacerun: yes;">   </span>         Format<span style="mso-spacerun: yes;">  text NOT NULL,</span></div><div><span style="mso-spacerun: yes;">            FileLocation text NULL,                </span> </div><div><span style="mso-spacerun: yes;">   </span>         PublicationDate<span style="mso-spacerun: yes;"> integer NOT NULL,  </span></div><div><span style="mso-spacerun: yes;">            Pages integer NOT NULL</span></div><div>       );</div><div># If you change your mind and later want to modify the Table, see my notes “SQLite-FAQ"</div><div><span style="font-size: 24px; font-weight: bold;">The SQLite Commands</span></div><div><span style="color: rgb(146, 146, 146);"># To see TABLES in a database</span></div><div><span style="font-weight: bold;">sqlite&gt;</span> <span style="color: rgb(0, 145, 147);">.tables</span></div><div><span style="color: rgb(148, 33, 147);">albums          employees       invoices        playlists    artists         genres          </span></div><div><span style="color: rgb(148, 33, 147);">media_types     tracks    customers       invoice_items   playlist_track</span></div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># To show the Structure of a Table:</span></div><div><br /></div><div><en-media hash="4684590e7a050de84b37df28ceedbf98" type="image/png" /><br /></div><div><br /></div><div># To learn more about the commands:</div><div><span style="font-weight: bold;">sqlite&gt; </span><span style="color: rgb(0, 145, 147); font-weight: bold;">.help</span></div><div><br /></div><h2>Execute SQL statements from a file</h2><div># Suppose we have a file named “commands.txt"  with the following content:</div><div><en-media hash="4349a2479d617a0f6868e44f6c8bd3bb" type="image/png" /><br /></div><div><br /></div><div><span style="font-weight: bold;">=&gt; sqlite3</span><span style="color: rgb(148, 17, 0);"> chinook.db</span></div><div><span style="color: rgb(146, 144, 0);">SQLite version 3.19.3 2017-06-08 14:26:16</span></div><div><span style="color: rgb(146, 144, 0);">Enter ".help" for usage hints.</span></div><div><span style="font-weight: bold;">sqlite&gt;</span><span style="color: rgb(146, 144, 0);"> .</span><span style="color: rgb(0, 145, 147); font-weight: bold;">mode</span><span style="color: rgb(146, 144, 0);"> </span><span style="color: rgb(148, 55, 255);">column</span></div><div><span style="font-weight: bold;">sqlite&gt;</span> <span style="color: rgb(0, 145, 147); font-weight: bold;">.read</span><span style="color: rgb(146, 144, 0);"> </span><span style="color: rgb(148, 17, 0);">commands.txt</span></div><div><span style="color: rgb(146, 144, 0);">156         ...And Justice For All</span></div><div><span style="color: rgb(146, 144, 0);">257         20th Century Masters -</span></div><div><span style="color: rgb(146, 144, 0);">296         A Copland Celebration,</span></div><div><span style="color: rgb(146, 144, 0);">94          A Matter of Life and D</span></div><div><span style="color: rgb(146, 144, 0);">95          A Real Dead One</span></div><div><span style="color: rgb(146, 144, 0);">96          A Real Live One</span></div><div><span style="color: rgb(146, 144, 0);">285         A Soprano Inspired</span></div><div><span style="color: rgb(146, 144, 0);">139         A TempestadeTempestade</span></div><div><span style="color: rgb(146, 144, 0);">203         A-Sides</span></div><div><span style="color: rgb(146, 144, 0);">160         Ace Of Spades</span></div><div><br /></div><h2 style="text-align: center;">Querying data from a table using <span style="color: rgb(255, 147, 0);">SELECT</span> statement</h2><div># As an example, we will take a look at the <span style="color: rgb(255, 64, 255);">tracks</span> table in our <span style="color: rgb(148, 17, 0);">chinook.db </span>database</div><div><br /></div><div><en-media hash="d43eba14522d3244b9c407945a4ba5f5" type="image/png" /><br /></div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># To show only the</span><span style="font-weight: bold;"> TrackID</span>, <span style="font-weight: bold;">Name</span>, <span style="font-weight: bold;">Composer</span> and<span style="font-weight: bold;"> InitPrice</span>:</div><div><span style="font-weight: bold;">sqlite&gt;</span> <span style="color: rgb(255, 147, 0); font-weight: bold;">SELECT</span><span style="color: rgb(0, 150, 255);"> trackid</span>, <span style="color: rgb(0, 150, 255);">name</span>, <span style="color: rgb(0, 150, 255);">composer</span>, <span style="color: rgb(0, 150, 255);">unitprice</span> <span style="color: rgb(255, 147, 0); font-weight: bold;">FROM</span> <span style="color: rgb(255, 64, 255);">tracks</span> <span style="color: rgb(255, 147, 0); font-weight: bold;">LIMIT</span> 14;</div><div><br /></div><div><en-media hash="bb8f7c6c2733d5a4ee420fb81570c5d8" type="image/png" /><br /></div><div><br /></div><div># You often use the <span style="color: rgb(255, 147, 0); font-weight: bold;">SELECT</span> statement to query data from one or more table. </div><div># The syntax of the <span style="color: rgb(255, 147, 0); font-weight: bold;">SELECT</span> statement is as follows:</div><div><br /></div><div><en-media hash="de6170fa5d4e69c4aa29ff592237f6af" type="image/png" /><br /></div><div><br /></div><div><ul><li> <a href="http://www.sqlitetutorial.net/sqlite-select-distinct">DISTINCT</a> clause to query unique rows in a table</li><li> <a href="http://www.sqlitetutorial.net/sqlite-inner-join/">INNER JOIN</a> or <a href="http://www.sqlitetutorial.net/sqlite-left-join/">LEFT JOIN</a> to query data from multiple tables using join.</li><li> <a href="http://www.sqlitetutorial.net/sqlite-where/">WHERE</a> clause to filter rows in the result set</li><li> <a href="http://www.sqlitetutorial.net/sqlite-order-by/">ORDER BY clause</a> to sort the result set</li><li> <a href="http://www.sqlitetutorial.net/sqlite-limit/">LIMIT</a> OFFSET clauses to constrain the number of rows returned</li><li> <a href="http://www.sqlitetutorial.net/sqlite-group-by/">GROUP BY</a> to get the group rows into groups and apply aggregate function for each group.</li><li> <a href="http://www.sqlitetutorial.net/sqlite-having/">HAVING</a> clause to filter groups</li></ul></div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># Often used commands:</span></div><div><span style="font-weight: bold;">=&gt; sqlite3</span> <span style="color: rgb(148, 17, 0);">chinook.db</span></div><div><span style="font-weight: bold;">sqlite&gt;</span><span style="color: rgb(146, 144, 0);"> .</span><span style="color: rgb(0, 145, 147); font-weight: bold;">mode</span><span style="color: rgb(146, 144, 0);"> </span><span style="color: rgb(148, 55, 255);">column</span></div><div><span style="font-weight: bold;">sqlite&gt;</span><span style="color: rgb(146, 144, 0);"> .</span><span style="color: rgb(0, 145, 147); font-weight: bold;">headers on  </span><span style="color: rgb(146, 146, 146);"># To show the named of the fileds</span></div><div><br /></div><div><hr /></div><div><span style="font-weight: bold;">The</span> <span style="color: rgb(148, 82, 0);"> </span><span style="color: rgb(148, 82, 0); font-weight: bold;">DISTINCT</span> <span style="font-weight: bold;">Clause</span></div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># The DISTINCT clause is an optional clause of the </span><a href="http://www.sqlitetutorial.net/sqlite-select/" style="color: rgb(146, 146, 146);">SELECT statement</a><span style="color: rgb(146, 146, 146);">. The DISTINCT clause allows you to remove the duplicate rows in the result set.</span></div><div><span style="font-size: 18px;"><span style="font-size: 18px; color: rgb(146, 146, 146); font-weight: normal;"># You put a column or a list of columns after the DISTINCT clause. If you use one column, SQLite uses that column to evaluate the duplicate. In case you use multiple columns, SQLite uses the combination of those columns to evaluate the duplicate.</span></span></div><div><span style="font-size: 18px;"><span style="font-size: 18px; color: rgb(146, 146, 146); font-weight: normal;"># SQLite considers NULL values as duplicates. If you use the DISTINCT clause with a column that has NULL values, SQLite will keep one row of a NULL value.</span></span></div><div><br /></div><div><span style="font-weight: bold;">sqlite&gt; </span><span style="color: rgb(255, 147, 0); font-weight: bold;">SELECT </span><span style="color: rgb(148, 82, 0); font-weight: bold;">DISTINCT</span> <span style="color: rgb(0, 150, 255); font-weight: bold;">city</span><span style="color: rgb(255, 147, 0);"> </span><span style="color: rgb(255, 147, 0); font-weight: bold;">FROM</span> <span style="color: rgb(255, 64, 255);">customers</span><span style="color: rgb(255, 47, 146); font-weight: bold;"> LIMIT</span><span style="color: rgb(148, 82, 0); font-weight: bold;"> </span><span style="font-weight: bold;">20</span> ;</div><div><span style="color: rgb(146, 146, 146);"># Try this without DISTINCT see how many duplicated cities you will get.</span></div><div><br /></div><div><hr /></div><div><span style="font-weight: bold;">The </span><span style="color: rgb(148, 82, 0); font-weight: bold;">INNER JOIN</span><span style="font-weight: bold;"> </span><span style="color: rgb(148, 17, 0); font-weight: bold;">… ON </span><span style="font-weight: bold;">without/with</span><span style="font-weight: bold;"> </span><span style="color: rgb(148, 17, 0); font-weight: bold;">WHERE </span><span style="font-weight: bold;">Clauses</span></div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># To </span><a href="http://www.sqlitetutorial.net/sqlite-select/" style="color: rgb(146, 146, 146);">query data</a><span style="color: rgb(146, 146, 146);"> from multiple tables, you use INNER JOIN clause. The INNER JOIN clause combines columns from correlated tables.</span></div><div><span style="color: rgb(146, 146, 146);"># Suppose we have two tables: </span><span style="color: rgb(146, 144, 0);">Table_A</span><span style="color: rgb(146, 146, 146);"> and </span><span style="color: rgb(146, 144, 0);">Table_B</span><span style="color: rgb(146, 146, 146);"> . </span></div><div><span style="color: rgb(146, 146, 146);"># - The table </span><span style="color: rgb(146, 144, 0);">Table_A </span><span style="color: rgb(146, 146, 146);">has the coilumns : </span><span style="color: rgb(0, 150, 255);">A_column1</span><span style="color: rgb(146, 146, 146);">, </span><span style="color: rgb(0, 150, 255);">A_column2</span><span style="color: rgb(146, 146, 146);"> and </span><span style="color: rgb(0, 150, 255);">AB_columnF</span></div><div><span style="color: rgb(146, 146, 146);"># - The table </span><span style="color: rgb(146, 144, 0);">Table_B</span><span style="color: rgb(146, 146, 146);"> has the coilumns : </span><span style="color: rgb(0, 150, 255);">B_column1</span><span style="color: rgb(146, 146, 146);">, </span><span style="color: rgb(0, 150, 255);">B_column2</span><span style="color: rgb(146, 146, 146);"> and </span><span style="color: rgb(0, 150, 255);">BA_columnF</span></div><div><span style="color: rgb(146, 146, 146);"># - The column “</span><span style="color: rgb(0, 150, 255);">AB_columnF</span><span style="color: rgb(146, 146, 146);">”  ans </span><span style="color: rgb(146, 146, 146);">“</span><span style="color: rgb(0, 150, 255);">BA_columnF</span><span style="color: rgb(146, 146, 146);">” </span><span style="color: rgb(146, 146, 146);">might have the same name and represent some foreign key.</span></div><div><span style="color: rgb(146, 146, 146);"># The following statement tells us that get the data from the both tables if the values of  </span><span style="color: rgb(0, 150, 255);">AB_columnF</span><span style="color: rgb(146, 146, 146);"> in the tabe </span><span style="color: rgb(146, 144, 0);">A</span></div><div><span style="color: rgb(146, 146, 146);"># matchs the values of  </span><span style="color: rgb(0, 150, 255);">BA_columnF</span><span style="color: rgb(146, 146, 146);"> in</span><span style="color: rgb(146, 144, 0);"> B</span></div><div><span style="font-weight: bold;">sqlite&gt; </span><span style="color: rgb(255, 147, 0); font-weight: bold;">SELECT</span> <span style="color: rgb(0, 150, 255);">A_column1</span><span style="color: rgb(146, 146, 146);">, </span><span style="color: rgb(0, 150, 255);">A_column2</span> <span style="color: rgb(255, 147, 0); font-weight: bold;"> FROM</span> <span style="color: rgb(146, 144, 0);">Table_A</span><span style="color: rgb(146, 146, 146);"> </span><span style="color: rgb(148, 82, 0); font-weight: bold;"> INNER JOIN</span><span style="color: rgb(148, 82, 0);"> </span> <span style="color: rgb(146, 144, 0);">Table_B </span> </div><div>      ...&gt; <span style="color: rgb(148, 82, 0); font-weight: bold;">ON</span>  <span style="color: rgb(146, 144, 0);">Table_B</span><span style="font-weight: bold;">.</span><span style="color: rgb(0, 150, 255);">BA_columnF </span>= <span style="color: rgb(146, 144, 0);">Table_A</span><span style="font-weight: bold;">.</span><span style="color: rgb(0, 150, 255);">AB_columnF </span>;</div><div><span style="color: rgb(146, 146, 146);"># Pay attention the ON condition : The tableB column comes first!  </span></div><div><span style="color: rgb(146, 146, 146);"># Also, there can be more than one the INNER JOIN …ON statements for a single SELECT statement</span></div><div><br /></div><div># The WHERE clause further limits the selected items:</div><div><span style="font-weight: bold;">sqlite&gt; </span><span style="color: rgb(255, 147, 0); font-weight: bold;">SELECT</span> <span style="color: rgb(0, 150, 255);">A_column1</span><span style="color: rgb(146, 146, 146);">, </span><span style="color: rgb(0, 150, 255);">A_column2</span> <span style="color: rgb(255, 147, 0); font-weight: bold;"> FROM</span> <span style="color: rgb(146, 144, 0);">Table_A</span><span style="color: rgb(146, 146, 146);"> </span><span style="color: rgb(148, 82, 0); font-weight: bold;"> INNER JOIN</span><span style="color: rgb(148, 82, 0);"> </span> <span style="color: rgb(146, 144, 0);">Table_B </span> </div><div>      ...&gt; <span style="color: rgb(148, 82, 0); font-weight: bold;">ON</span>  <span style="color: rgb(146, 144, 0);">Table_B</span><span style="font-weight: bold;">.</span><span style="color: rgb(0, 150, 255);">BA_columnF </span>= <span style="color: rgb(146, 144, 0);">Table_A</span><span style="font-weight: bold;">.</span><span style="color: rgb(0, 150, 255);">AB_columnF </span></div><div>      ...&gt; <span style="color: rgb(148, 17, 0); font-weight: bold;">WHERE</span>  <span style="color: rgb(146, 144, 0);">Table_B</span><span style="font-weight: bold;">.</span><span style="color: rgb(0, 150, 255);">BA_columnF = </span>some of its value ;</div><div><br /></div><div><span style="color: rgb(146, 146, 146);"># Example fro our “chinook.db” database:</span></div><div><span style="color: rgb(146, 146, 146);"># </span><span style="color: rgb(146, 144, 0);">Table_A</span><span style="color: rgb(146, 146, 146);"> = </span><span style="color: rgb(146, 144, 0);">tracks  and Table_B</span><span style="color: rgb(146, 146, 146);"> =</span><span style="color: rgb(146, 144, 0);"> alnums</span></div><div><span style="font-weight: bold;">sqlite&gt; </span><span style="color: rgb(255, 147, 0); font-weight: bold;">SELECT</span> <span style="color: rgb(0, 150, 255);">trackid</span>, <span style="color: rgb(0, 150, 255);">name</span>,<span style="color: rgb(0, 150, 255);"> title</span><span style="color: rgb(255, 147, 0); font-weight: bold;"> FROM</span> <span style="color: rgb(146, 144, 0);">tracks</span> <span style="color: rgb(148, 82, 0); font-weight: bold;">INNER JOIN</span><span style="color: rgb(146, 144, 0);"> albums</span><span style="font-weight: bold;"> </span><span style="color: rgb(148, 82, 0); font-weight: bold;">ON</span> <span style="color: rgb(0, 150, 255);">albums.albumid</span> =<span style="color: rgb(0, 150, 255);"> tracks.albumid</span>;</div><div><div># Note: The above example will not show the neither “tracks” nor “albums” ID fields.  To do so, use AS</div><div><span style="font-weight: bold;">sqlite&gt; </span><span style="color: rgb(255, 147, 0); font-weight: bold;">SELECT</span> <span style="color: rgb(0, 150, 255);">trackid</span>, <span style="color: rgb(0, 150, 255);">name</span>,<span style="color: rgb(0, 150, 255);"> title</span><span style="color: rgb(255, 147, 0); font-weight: bold;"> FROM</span> <span style="color: rgb(146, 144, 0);">tracks</span> <span style="color: rgb(148, 82, 0); font-weight: bold;">INNER JOIN</span><span style="color: rgb(146, 144, 0);"> albums </span></div><div><span style="color: rgb(146, 144, 0);">      ...</span>&gt; <span style="font-weight: bold;"> </span><span style="color: rgb(148, 82, 0); font-weight: bold;">ON</span> <span style="color: rgb(0, 150, 255);">albums.albumid</span> =<span style="color: rgb(0, 150, 255);"> tracks.albumid </span><span style="color: rgb(148, 17, 0); font-weight: bold;">WHERE </span><span style="color: rgb(148, 17, 0);"> </span><span style="color: rgb(0, 150, 255);">albums.albumid </span>= 5 ;</div><div><br /></div><div><span style="font-weight: bold; text-decoration: underline;">Hint</span>: You can the names of the fileds using <span style="color: rgb(148, 17, 0);">AS</span> </div><div><span style="color: rgb(255, 147, 0);">SELECT</span> trackid <span style="color: rgb(148, 17, 0);">AS</span> TrackID, name AS ProductName, …<span style="color: rgb(148, 82, 0);">FROM</span> …</div><div>( Empty spaces allowed if you use “ “ , “Profuct Name” )</div><hr /></div><div><span style="font-weight: bold;">The </span><span style="color: rgb(148, 82, 0); font-weight: bold;">ORDER BY </span><span style="font-weight: bold;">clause</span></div><div><br /></div><div># SQLite table stores rows in a table in an unspecified order.</div><div># If you use the <a href="http://www.sqlitetutorial.net/sqlite-select/">SELECT statement</a> to query data from a table, the order of rows in the result set is unspecified.</div><div># The ORDER BY clause comes after the FROM clause. The ORDER BY clause allows you to sort the result set based on one or more columns in different orders: ascending and descending.</div><div># The ASC keyword means ascending order, and DESC keyword means descending orders.</div><div><br /></div><div><span style="font-weight: bold;">=&gt; sqlite3</span> <span style="color: rgb(148, 17, 0);">chinook.db</span></div><div><span style="color: rgb(148, 17, 0); font-weight: bold;">sqlite&gt;</span><span style="color: rgb(146, 144, 0);"> .</span><span style="color: rgb(0, 145, 147); font-weight: bold;">mode</span><span style="color: rgb(146, 144, 0);"> </span><span style="color: rgb(148, 55, 255);">column</span></div><div><span style="color: rgb(148, 17, 0); font-weight: bold;">sqlite&gt;</span><span style="color: rgb(148, 55, 255);"> </span><span style="color: rgb(255, 147, 0); font-weight: bold;">SELECT</span><span style="color: rgb(148, 55, 255);"> </span><span style="color: rgb(255, 64, 255);">name, milliseconds, albumid</span><span style="color: rgb(148, 55, 255);"> </span><span style="color: rgb(255, 147, 0);">FROM</span><span style="color: rgb(148, 55, 255);"> tracks </span><span style="color: rgb(148, 82, 0); font-weight: bold;">ORDER BY</span><span style="color: rgb(148, 55, 255);"> </span><span style="color: rgb(255, 64, 255); font-weight: bold;">albumid</span><span style="color: rgb(255, 64, 255);"> </span><span style="color: rgb(148, 55, 255);">ASC </span><span style="color: rgb(255, 47, 146); font-weight: bold;">LIMIT</span><span style="color: rgb(148, 55, 255); font-weight: bold;"> </span><span style="font-weight: bold;">20</span><span style="color: rgb(148, 55, 255);">;</span></div><div><span style="color: rgb(146, 146, 146);"># Try without ORDER BY to see the difference.</span></div><div><br /></div><div><hr /></div><div style="text-align: center;"><span style="font-size: 27px; font-family: 'Helvetica Neue'; font-weight: bold;">The </span><span style="font-size: 27px; color: rgb(255, 147, 0); font-family: 'Helvetica Neue'; font-weight: bold;">INSERT</span><span style="font-size: 27px; font-family: 'Helvetica Neue'; font-weight: bold;"> Statement</span></div><div><br /></div><div><span style="font-size: 24px; font-weight: bold;">Inserting</span><span style="font-size: 24px; font-weight: bold;"> a Single Row into a Table</span></div><div><span style="font-size: 24px; font-weight: bold;"><br /></span></div><div><b><font color="#ff9300">INSERT</font><font color="#945200"> INTO</font><font color="#ff9300"> </font></b><font color="#929000">book</font> <b>(</b> </div><div><font color="#0096ff">Title</font>,<font color="#0096ff"> Authors</font>, <font color="#0096ff">Subject</font>, <font color="#0096ff">Category</font>, <font color="#0096ff">Branch</font>, <font color="#0096ff">Language</font>, <font color="#0096ff">Edition</font>, <font color="#0096ff">Format</font>,<font color="#0096ff"> FileLocation</font>, <font color="#0096ff">PublicationDate</font>,<font color="#0096ff"> Pages </font><b>)</b></div><div><b><font color="#945200">VALUES</font></b> <b>( </b>"<font color="#941100">Classical Mechanics</font>", "<font color="#941100">H.Goldstein, Charles Poole and John Safko</font>", "<font color="#941100">Science</font>", "<font color="#941100">Physics</font>", "<font color="#941100">Mechanics</font>”, "<font color="#941100">English</font>", <font color="#941100">3</font>, "<font color="#941100">djvu"</font>, "<font color="#941100">ExtHD</font>", <font color="#941100">2000</font>, <font color="#941100">638</font></div><div><b>);</b></div><div><hr /><div style="text-align: center;"><br /></div></div><div style="text-align: center;"><br /></div><div style="text-align: center; "><span style="font-size: 27px; font-family: 'Helvetica Neue'; font-weight: bold;">The <font color="#ff9300">UPDATE</font></span><span style="font-size: 27px; font-family: 'Helvetica Neue'; font-weight: bold;"> Statement</span></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div></en-note>