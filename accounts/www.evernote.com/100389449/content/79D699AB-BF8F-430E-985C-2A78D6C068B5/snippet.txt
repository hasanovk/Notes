Introduction to Continuous Delivery Traditional Release Cycle Continuous Delivery Continuous Delivery using Docker Setting up a Simple Continuous Delivery Pipeline with Docker Update October 2016 Preconditions Sources The Example Application and the Advantage of Using Runnable Fat Jars Big Picture Warning: Technical Spike Step by Step The Commit Stage Acceptance Test Stage Deployment Stage Further Readings Introducing Continuous Delivery means to automate the delivery process and to release our application frequently. This way, we improve the reliability of the release process, reduce the risk and get feedback faster. However, setting up a Continuous Delivery pipeline can be difficult in the beginning. In this step by step tutorial I will show you how to configure a simple Continuous Delivery pipeline using Git, Docker, Maven and Jenkins. Introduction to Continuous Delivery Traditional Release Cycle Following the “old-school” release approach means to ship a release after a certain amo